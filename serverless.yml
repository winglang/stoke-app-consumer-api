service: fe-api

frameworkVersion: '3'

plugins:
  - serverless-jest-plugin
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-log-forwarding
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-plugin-scripts
  - serverless-prune-plugin
  - serverless-plugin-common-excludes
  - serverless-latest-layer-version
  - serverless-plugin-split-stacks
  - serverless-step-functions
  - serverless-middleware
  - serverless-cors-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  consumerApiService: fe-api
  consumerApiGatewayService: con-api
  messagingApiService: msg-api
  auditTableName: ${self:custom.stage}-audit
  providersTableName: ${self:custom.stage}-providers
  jobsTableName: ${self:custom.stage}-jobs
  skillIdsTableName: ${self:custom.stage}-skill-ids
  messagesTableName: ${self:custom.stage}-messages
  jobSkillIdsTableName: ${self:custom.stage}-job-skill-ids
  budgetsTableName: ${self:custom.stage}-budgets
  bidsTableName: ${self:custom.stage}-bids
  consumerAuthTableName: ${self:custom.stage}-consumer-auth
  ledgerTableName: ${self:custom.stage}-ledger
  customersTable: ${self:custom.stage}-customers
  companiesTable: ${self:custom.stage}-consumer-companies
  talentsTableName:  ${self:custom.stage}-talents
  settingsTableName:  ${self:custom.stage}-settings
  wsConnectionsTableName: ${self:custom.stage}-ws-connections-v3
  userNotificationsTableName: ${self:custom.stage}-user-notifications
  companyProvidersTableName: ${self:custom.stage}-company-providers
  paymentsTableName: ${self:custom.stage}-payments
  exchangeRatesTableName: ${self:custom.stage}-exchange-rates
  generateConfigFile: ${self:custom.stage}-generated_config.json
  invoicesFolderName: invoices
  billingFolderName: billing
  webhookQueueName: ${self:custom.stage}-webhook
  WEBHOOK_API_KEY: "12345"
  originStage: 
    prod: https://app.enterprise.fiverr.com
    dev: '*'
    default: https://${self:custom.stage}.enterprise.fiverr.com
  corsOrigin: ${self:custom.originStage.${self:custom.stage}, self:custom.originStage.default}
  arnSsmPrefix: !Join [':', ['arn:aws:ssm', Ref: AWS::Region, Ref: AWS::AccountId, 'parameter']]
  arnSSmWithStage: !Join ['/', ['${self:custom.arnSsmPrefix}', '${self:custom.stage}']]
  
  openaiSsmArn: !Join ['/', ['${self:custom.arnSSmWithStage}', 'openai', 'apiKey*']]
  talentLakeToken: !Join ['/', ['${self:custom.arnSSmWithStage}', 'talentLake', 'token']]
  
  VPCStaticIPSecurityGroupId: 
    Fn::ImportValue: ${self:custom.stage}-VPCStaticIPSecurityGroup
  VPCStaticIPSubnetPrivateId: 
    Fn::ImportValue: ${self:custom.stage}-VPCStaticIPSubnetPrivate

  gsiUsersByEntityIdIndexName: gsiUsersByEntityId_V2
  gsiItemsByExternalUserIdIndexName: gsiItemsByExternalUserId
  gsiItemByUserIdIndexName: gsiItemByUserId_V2
  itemsByUserIdGsiName: gsiItemsByUserId
  gsiItemByUserIdAndCreatedAtIndexName: gsiItemByUserIdAndCreatedAt
  gsiItemByEntityIdIndexName: gsiItemByEntityId
  gsiItemByEntityIdAndItemIdIndexName: gsiItemByEntityIdAndItemId
  gsiItemsByCompanyIdAndItemIdIndexName: gsiItemsByCompanyIdAndItemId
  gsiItemsByCompanyIdAndPOItemIdIndexName: gsiItemsByCompanyIdAndPOItemId
  gsiItemsByCompanyIdAndPOFeesItemIdIndexName: gsiItemsByCompanyIdAndPOFeesItemId
  gsiItemsByCompanyIdAndItemIdIndexNameV2: gsiItemsByCompanyIdAndItemId_V2
  gsiItemsByCompanyIdAndUserIdIndexName: gsiItemsByCompanyIdAndUserId
  gsiItemsByCompanyIdAndTalentId: gsiItemsByCompanyIdAndTalentId_V2
  gsiViewDataByCompanyIdAndItemId: gsiViewDataByCompanyIdAndItemId_V2
  gsiItemsByCompanyIdIndexName: gsiItemsByCompanyId_V2
  gsiItemsByUserIdAndCreatedAtIndexName: gsiItemsByUserIdAndCreatedAt
  gsiItemsByCompanyIdAndJobIdIdx: gsiItemsByCompanyIdAndJobId
  gsiItemByItemStatusIdxV2: gsiItemByItemStatus_V2
  consumerClientName: stoke-app-consumer-client
  consumerClientBucketName: ${self:custom.consumerClientName}-${self:custom.stage}
  jobsBucketName: ${self:custom.stage}-${self:service}-jobs
  consumerUserPoolName: ${self:custom.stage}-consumer-user-pool
  consumerLocalDomain:
    default: ${self:custom.CONSUMER_URL_DOMAIN}
    dev: 'http://localhost:8080'
  domainStagePrefix: 
    prod: ''
    default: ${self:custom.stage}-
  consumerLocalDomainUrl: ${self:custom.consumerLocalDomain.${self:custom.stage}, self:custom.consumerLocalDomain.default}
  domainPrefix: ${self:custom.domainStagePrefix.${self:custom.stage}, self:custom.domainStagePrefix.default}  
  consumerUserPoolAuthServerDomainName: ${self:custom.domainPrefix}auth.stoketalent.com
  consumerUserPoolAuthResourceServerDomainName: ${self:custom.domainPrefix}resource-auth.stoketalent.com
  consumerUserPoolAuthResourceServerCustomCompanyName: company
  crossCompanyUserPoolName: ${self:custom.stage}-cross-company-user-pool
  crossCompanyUserPoolNameV2: ${self:custom.stage}-cross-company-user-pool-v2
  interactTalentSnsTopic: ${self:custom.stage}-interact-talent-notifications
  rejectRequestPaymentSnsTopic: ${self:custom.stage}-reject-request-payment-notifications
  legalEntitiesSnsTopic: ${self:custom.stage}-legal-entities-notifications
  jobsFlowSnsTopic: ${self:custom.stage}-jobs-flow-notifications
  bidsSnsTopic: ${self:custom.stage}-bids-notifications
  JobSNSTopic: ${self:custom.stage}-jobs-notifications
  authSnsTopic: ${self:custom.stage}-auth-notifications
  userActionsSnsTopic: ${self:custom.stage}-user-actions-notifications
  cognitoSesSnsTopic: ${self:custom.stage}-cognito-ses-notifications
  adminNotificationsEmail: ${self:custom.stage}-info@stoketalent.com
  LegalDocsQueueName: ${self:custom.stage}-legal-docs
  asyncTasksQueueName: ${self:custom.stage}-async-tasks
  auditQueueName: ${self:custom.stage}-audit
  callToActionQueueName: ${self:custom.stage}-call-to-action
  interactSnsTopic: ${self:custom.stage}-interact-talent-notifications
  consumerUrlDomain: 
    prod: https://app.enterprise.fiverr.com
    default: https://${self:custom.stage}.enterprise.fiverr.com
  CONSUMER_URL_DOMAIN: ${self:custom.consumerUrlDomain.${self:custom.stage}, self:custom.consumerUrlDomain.default}
  consumerUrlDomainOld:
    prod: https://app.stoketalent.com
    default: https://${self:custom.stage}.stoketalent.com
  CONSUMER_URL_DOMAIN_OLD: ${self:custom.consumerUrlDomainOld.${self:custom.stage}, self:custom.consumerUrlDomainOld.default}
  talentUrlDomain: 
    prod: https://talent.enterprise.fiverr.com
    default: https://talent-${self:custom.stage}.enterprise.fiverr.com
  providerAuthService: prv-auth
  providersUserPoolId:
    Fn::ImportValue: ${self:custom.providerAuthService}-${self:custom.stage}-provider-user-pool-UserPoolId
  consumerUserPoolId: 
    Fn::ImportValue: ${self:custom.consumerApiService}-${self:custom.stage}-consumer-user-pool-UserPoolId
  sendLegalDocs:
    prod: false
    default: true
  
  idPublicPosting:
    prod: false
    default: false

  OPENAI_USED_PACKAGE: azureOpenAI

  # keeps us from reaching the aws stack 200 resource limit, for now.
  # going forward, we need to split this service vertically to smaller services
  splitStacks:
    perFunction: false
    perType: true

  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

  jest:
    collectCoverage: true
    setupTestFrameworkScriptFile: './jest.setup.js'
    reporters: ['default', './error-handling-reporter.js']
    coveragePathIgnorePatterns: ['./jest.setup.js']
  amplify:
    - filename: ${self:custom.generateConfigFile}
      type: native
      appClient: CognitoUserPoolClient
      secAppClient: CognitoCrossCompanyUserPoolClientV2
      s3bucket: JobsBucket

  # use serverless hooks to upload assets to S3
  scripts:
    commands: 
      config-ui: aws s3 cp ./${self:custom.generateConfigFile} s3://stoke-app-consumer-client-${self:custom.stage}/generated_config.json
    hooks:
      'after:aws:deploy:deploy:updateStack': |
        echo '> syncing S3 consumer-api buckets...'
        aws s3 sync buckets/jobs/defaults s3://${self:custom.jobsBucketName}/defaults
        echo '> consumer-api buckets sync done'

  dynamodb:
    stages:
      - ${self:custom.stage}
    start:
      seed: true
    seed:
      local:
        sources:
          - table: ${self:custom.consumerAuthTableName}
            sources: [./seed/auth.json]
          - table: ${self:custom.jobsTableName}
            sources: [./seed/jobs.json]
          - table: ${self:custom.customersTable}
            sources: [./seed/companies.json]
          - table: ${self:custom.budgetsTableName}
            sources: [./seed/budgets.json]
          - table: ${self:custom.companyProvidersTableName}
            sources: [./seed/company-providers.json]
          - table: ${self:custom.settingsTableName}
            sources: [./seed/settings.json]
          - table: ${self:custom.talentsTableName}
            sources: [./seed/talents.json]
      test:
        sources:
          - table: ${self:custom.consumerAuthTableName}
            sources: []
  logForwardingLambdaName: ${self:custom.stage}-logz-shipper-lambda-tracking-logs-v2

  logForwarding:
    destinationARN:
      Fn::Join:
        - ':'
        - - 'arn:aws:lambda'
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - ${self:custom.logForwardingLambdaName}

  dynamodbStream:
    host: localhost
    port: 8000
    region: us-east-1
    pollForever: true
    streams:
      - table: ${self:custom.userNotificationsTableName}
        functions:
          - sendMessage
      - table: ${self:custom.wsConnectionsTableName}
        functions:
          - newWSConnection

provider:
  name: aws
  deploymentMethod: direct
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  logs:
    websocket: true
  websocketsApiRouteSelectionExpression: $request.body.action
  websocketsApiName: stoke-app-consumer-ws
  versionFunctions: false
  region: us-east-1
  timeout: 600
  layers:
    - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest

  apiGateway:
    restApiId:
      Fn::ImportValue: ${self:custom.stage}-${self:custom.consumerApiGatewayService}-restApiId
    restApiRootResourceId:
      Fn::ImportValue: ${self:custom.stage}-${self:custom.consumerApiGatewayService}-rootResourceId
    # websocketApiId:
    #   Fn::ImportValue: ${self:custom.stage}-${self:custom.consumerApiGatewayService}-websocketApiId
    apiKeys:
      - webhook:
        - name: ${opt:stage, 'dev'}-webhookKey
          value: ${self:custom.WEBHOOK_API_KEY}
    usagePlan:
      - webhook:
          quota:
            limit: 50000
            period: MONTH
          throttle:
            burstLimit: 2000
            rateLimit: 1000
      - StokeAI:
          quota:
            limit: 500
            period: DAY
          throttle:
            burstLimit: 30
            rateLimit: 10
  
  # shared environment variables, available to all functions
  environment:
    stage: ${self:custom.stage}
    idPublicPosting: ${self:custom.idPublicPosting.${self:custom.stage}, self:custom.idPublicPosting.default}
    awsRegion: ${self:provider.region}

    jobsTableName: ${self:custom.jobsTableName}
    skillIdsTableName: ${self:custom.skillIdsTableName}
    jobSkillIdsTableName: ${self:custom.jobSkillIdsTableName}
    bidsTableName: ${self:custom.bidsTableName}
    messagesTableName: ${self:custom.messagesTableName}
    budgetsTableName: ${self:custom.budgetsTableName}
    consumerAuthTableName: ${self:custom.consumerAuthTableName}
    ledgerTableName: ${self:custom.ledgerTableName}
    companiesTableName: ${self:custom.companiesTable}
    customersTableName: ${self:custom.customersTable}
    companyProvidersTableName: ${self:custom.companyProvidersTableName}
    wsConnectionsTableName: ${self:custom.wsConnectionsTableName}
    userNotificationsTableName: ${self:custom.userNotificationsTableName}
    talentsTableName: ${self:custom.talentsTableName}
    settingsTableName: ${self:custom.settingsTableName}
    providersTableName: ${self:custom.providersTableName}
    auditTableName: ${self:custom.auditTableName}
    exchangeRatesTableName: ${self:custom.exchangeRatesTableName}

    gsiItemsByCompanyIdAndUserIdIndexName: ${self:custom.gsiItemsByCompanyIdAndUserIdIndexName}
    gsiUsersByEntityIdIndexName: ${self:custom.gsiUsersByEntityIdIndexName}
    gsiItemByUserIdIndexName: ${self:custom.gsiItemByUserIdIndexName}
    gsiItemByEntityIdIndexName: ${self:custom.gsiItemByEntityIdIndexName}
    gsiItemByEntityIdAndItemIdIndexName: ${self:custom.gsiItemByEntityIdAndItemIdIndexName}
    gsiItemsByCompanyIdAndItemIdIndexName: ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
    gsiItemsByCompanyIdAndPOItemIdIndexName: ${self:custom.gsiItemsByCompanyIdAndPOItemIdIndexName}
    gsiItemsByCompanyIdAndPOFeesItemIdIndexName: ${self:custom.gsiItemsByCompanyIdAndPOFeesItemIdIndexName}
    gsiItemsByCompanyIdAndItemIdIndexNameV2: ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
    gsiItemsByCompanyIdAndTalentId: ${self:custom.gsiItemsByCompanyIdAndTalentId}
    gsiViewDataByCompanyIdAndItemId: ${self:custom.gsiViewDataByCompanyIdAndItemId}
    gsiItemsByCompanyIdIndexName: ${self:custom.gsiItemsByCompanyIdIndexName}
    gsiItemsByUserIdAndCreatedAtIndexName: ${self:custom.gsiItemsByUserIdAndCreatedAtIndexName}
    gsiItemsByExternalUserIdIndexName: ${self:custom.gsiItemsByExternalUserIdIndexName}
    itemsByUserIdGsiName: ${self:custom.itemsByUserIdGsiName}
    gsiItemsByCompanyIdAndJobIdIdx: ${self:custom.gsiItemsByCompanyIdAndJobIdIdx}
    gsiItemByItemStatusIdxV2: ${self:custom.gsiItemByItemStatusIdxV2}
    TALKJS_API_KEY: "12345"
    TALKJS_APP_ID: "12345"
    invoicesFolderName: ${self:custom.invoicesFolderName}
    billingFolderName: ${self:custom.billingFolderName}
    engineerSkillsBot: two_EngineerSkills_bot
    marketingSkillsBot: two_MarketingSkills_bot
    miscellaneousSkillsBot: two_MiscellaneousSkills_bot
    designSkillsBot: two_DesignSkills_bot
    adminSkillsBot: two_AdminSkills_bot
    financeSkillsBot: two_FinanceSkills_bot
    jobsBucketName: ${self:custom.jobsBucketName}
    LegalDocsQueueName: ${self:custom.LegalDocsQueueName}
    asyncTasksQueueName: ${self:custom.asyncTasksQueueName}
    auditQueueName: ${self:custom.auditQueueName}
    callToActionQueueName: ${self:custom.callToActionQueueName}
    PROVIDER_USER_POOL_ID: ${self:custom.providersUserPoolId}
    CONSUMER_URL_DOMAIN: ${self:custom.consumerUrlDomain.${self:custom.stage}, self:custom.consumerUrlDomain.default}
    consumerUserPoolAuthServerDomainName: ${self:custom.consumerUserPoolAuthServerDomainName}
    consumerUserPoolAuthResourceServerDomainName: ${self:custom.consumerUserPoolAuthResourceServerDomainName}
    consumerUserPoolAuthResourceServerCustomCompanyName: ${self:custom.consumerUserPoolAuthResourceServerCustomCompanyName}
    corsOrigin: ${self:custom.corsOrigin}
    interactTalentSnsTopicArn: 
      Ref: InteractTalentTopic
    rejectRequestPaymentSnsTopicArn: 
      Ref: RejectRequestPaymentTopic
    legalEntitiesSnsTopicArn: 
      Ref: LegalEntitiesSnsTopic
    jobsFlowSnsTopicArn: 
      Ref: JobsFlowSnsTopic
    bidsSnsTopicArn: 
      Ref: BidsSnsTopic
    authSnsTopicArn:
      Ref: AuthSnsTopic
    userActionsSnsTopicArn:
      Ref: UserActionsSnsTopic
    # jobSNSTopicArn: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.JobSNSTopic}
    # INTERACT_TOPIC_ARN: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.interactSnsTopic}
    jobSNSTopicArn: 
      Fn::Join:
        - ':'
        - - 'arn:aws:sns'
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - '${self:custom.JobSNSTopic}'
    INTERACT_TOPIC_ARN:
      Fn::Join:
        - ':'
        - - 'arn:aws:sns'
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - '${self:custom.interactSnsTopic}'
    virusScanStartTime:  1695208466000 # Starting September, 20, 2023

package:
  patterns:
    - '!.dynamodb/**'
    - '!.vscode/**'
    - '!tests/**'
    - '!mocks/**'
    - '!seed/**'
    - '!__tests__/**'
    - '!coverage/**'
    - '!.eslintignore'
    - '!.eslintrc.js'
    - '!jest.setup.js'
    - '!package.json'
    - '!package-lock.json'
    - '!.gitignore'
    - '!node_modules/csv-parse/lib/browser/**'
    - '!node_modules/pdfkit/**'
    - '!node_modules/lodash/**'
    - '!node_modules/gpt-3-encoder/**'
    - '!node_modules/**/lodash/**'
    - '!node_modules/**/__tests__/**'
    - '!node_modules/cron-schedule/**'
    - '!node_modules/**/cron-schedule/**'
    - '!node_modules/sib-api-v3-sdk/**'
    - '!node_modules/stoke-email/node_modules/lodash/**'

# keep function keys short, or risk getting bitten by the dreadful "Member must have length less than or equal to 64" validation error!
# may happen as serverless internally build the lambda IAM roles' physical ids by concatenating various identifiers, one of which is the function name.

functions:
  getToken:
    handler: src/webSocketHandler.getToken
    events:
      - http:
          path: /getToken
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:GetParametersByPath
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
    environment:
      PARAM_NAME_INVITATIONID_PASS: /${self:custom.stage}/auth/invitationId/password
      PARAM_NAME_INVITATIONID_SALT: /${self:custom.stage}/auth/invitationId/salt
  getLanguages:
    handler: src/getLanguages.handler
    events:
      - http:
          path: /languages
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
  newWSConnection:
    handler: src/webSocketHandler.newConnectionHandler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [wsConnectionsTable, StreamArn]
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource:
          'arn:aws:execute-api:${self:provider.region}:727244588241:*/${self:provider.stage}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ''
              -
                - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':table/'
                - ${self:custom.userNotificationsTableName}
                - '/index/*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope

          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ''
              -
                - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':table/'
                - ${self:custom.wsConnectionsTableName}
  sendMessage:
    handler: src/webSocketHandler.messagesHandler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::ImportValue: ${self:custom.messagingApiService}-${self:custom.messagesTableName}-StreamArn
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [UserNotificationsTable, StreamArn]
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource:
          'arn:aws:execute-api:${self:provider.region}:727244588241:*/${self:provider.stage}/*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt: [ wsConnectionsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [UserNotificationsTable, Arn ]
              - 'index'
              - gsiItemsByUserIdAndCreatedAt
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [wsConnectionsTable, Arn ]
              - 'index'
              - gsiItemsByUserIdAndCreatedAt
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ''
              -
                - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':table/'
                - ${self:custom.consumerAuthTableName}
                - '/index/*'
  connectManagerAuth: 
    handler: src/webSocketHandler.connectHandlerAuth
    environment:
      consumerUrlDomain: ${self:custom.consumerUrlDomain.${self:custom.stage}, self:custom.consumerUrlDomain.default}  
  connectManager:
    handler: src/webSocketHandler.connectHandler
    events:
      - websocket:
          route: $connect
          authorizer: 
            name: connectManagerAuth
            # type: request
            identitySource: 
              - route.request.header.Sec-WebSocket-Protocol
              - route.request.header.Origin
    environment:
      PARAM_NAME_INVITATIONID_PASS: /${self:custom.stage}/auth/invitationId/password
      PARAM_NAME_INVITATIONID_SALT: /${self:custom.stage}/auth/invitationId/salt
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:GetParametersByPath
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ wsConnectionsTable, Arn ]
  disconnectManager:
    handler: src/webSocketHandler.disconnectHandler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [wsConnectionsTable, Arn ]
  wsDefault:
    handler: src/webSocketHandler.defaultMessageHandler
    events:
      - websocket:
          route: $default
  preSignup:
    handler: src/auth.preSignUp
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
        - Fn::Join:
            - ''
            -
              - 'arn:aws:dynamodb:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':table/'
              - ${self:custom.customersTable}
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:GetParametersByPath
          - ssm:GetParameters
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
      - Effect: Allow 
        Action: 
          - cognito-idp:ListUsers
          - cognito-idp:AdminLinkProviderForUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - ${self:custom.consumerUserPoolId}
    environment:
      PARAM_NAME_INVITATIONID_PASS: /${self:custom.stage}/auth/invitationId/password
      PARAM_NAME_INVITATIONID_SALT: /${self:custom.stage}/auth/invitationId/salt
    events:
      - cognitoUserPool:
          pool: ConsumerUserPool
          trigger: PreSignUp
      - cognitoUserPool:
          pool: CrossCompanyUserPoolV2
          trigger: PreSignUp
  postConfirmation:
    handler: src/auth.postConfirmation
    events:
      - cognitoUserPool:
          pool: ConsumerUserPool
          trigger: PostConfirmation
      - cognitoUserPool:
          pool: CrossCompanyUserPoolV2
          trigger: PostConfirmation
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:BatchGetItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource:
        - Fn::Join:
            - ''
            -
              - 'arn:aws:dynamodb:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':table/'
              - ${self:custom.customersTable}
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:GetParametersByPath
          - ssm:GetParameters
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
  cstmMsg:
    handler: src/auth.customMessage
    iamRoleStatementsInherit: false
    iamRoleStatements: []
    events:
      - cognitoUserPool:
          pool: ConsumerUserPool
          trigger: CustomMessage
      - cognitoUserPool:
          pool: CrossCompanyUserPoolV2
          trigger: CustomMessage
    environment:
      SIGNUP_EMAIL_SUBJECT: Welcome to Fiverr Enterprise! Step 1 inside...
      WELCOME_EMAIL_SUBJECT: Here’s your verification code
      CROSS_COMPANY_USER_POOL_ID:
        # Ref: CognitoUserPoolCrossCompanyUserPool
        Fn::ImportValue: ${self:service}-${self:custom.stage}-cross-company-user-pool-UserPoolId-V2
  postAuth:
    handler: src/auth.postAuthentication
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: AuthSnsTopic
    events:
      - cognitoUserPool:
          pool: ConsumerUserPool
          trigger: PostAuthentication
      - cognitoUserPool:
          pool: CrossCompanyUserPoolV2
          trigger: PostAuthentication
  preToken:
    handler: src/auth.preTokenGeneration
    iamRoleStatementsInherit: false
    events:
      - cognitoUserPool:
          pool: ConsumerUserPool
          trigger: PreTokenGeneration
      - cognitoUserPool:
          pool: CrossCompanyUserPoolV2
          trigger: PreTokenGeneration
  # healthCheck:
  #   handler: src/status.healthCheck
  #   events:
  #     - http:
  #         path: /status
  #         method: get
  #         cors: true
  #         authorizer: aws_iam
  signUp:
    handler: src/companies.signUp
    events:
      - http:
          path: /signup
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - apigateway:POST
        Resource:
          - arn:aws:apigateway:us-east-1::/apikeys
          - arn:aws:apigateway:us-east-1::/usageplans/*/keys
      - Effect: Allow
        Action:
          - apigateway:GET
        Resource:
          - arn:aws:apigateway:us-east-1::/usageplans
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}

  compSignup:
    handler: src/companies.signUpToCompany
    events:
      - http:
          path: /signUpToCompany
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
        Action: cognito-idp:adminUpdateUserAttributes
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolCrossCompanyUserPoolV2'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
  
  changeUserRole:
    handler: src/users/changeUserRole.handler
    events:
      - http:
          path: /changeUserRole/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}

  createApiAuth:
    handler: src/createApiAuth.handler
    events:
      - http:
          path: /apiAuth
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow 
        Action: 
          - cognito-idp:CreateUserPoolClient
          - cognito-idp:DescribeUserPoolClient
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'
          
    environment:
      REFRESH_TOKEN_TIME: 3650
      ACCESS_TOKEN_TIME: 24
      USER_POOL_ID: 
        Ref: CognitoUserPoolConsumerUserPool

  compUsrAdd:
    middleware:
      pre:
        - src/middleware/authorize.handler
    timeout: 60 # 60 seconds, instead of default is 6, allow cognito to take its time
    handler: src/companies.addUserToCompany
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}  
      - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
        Action: cognito-idp:AdminCreateUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolCrossCompanyUserPoolV2'
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:GetParametersByPath
          - ssm:GetParameters
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
    environment:
      PARAM_NAME_INVITATIONID_PASS: /${self:custom.stage}/auth/invitationId/password
      PARAM_NAME_INVITATIONID_SALT: /${self:custom.stage}/auth/invitationId/salt
      USER_POOL_ID: 
        Ref: CognitoUserPoolConsumerUserPool
    events:
      - http:
          path: /userInCompany
          method: post
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayCognitoAuthorizer
  
  compUsrResend:
    timeout: 60 # 60 seconds, instead of default is 6, allow cognito to take its time
    handler: src/companies.resendInvitation
    events:
      - http:
          path: /userResend
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - "/" 
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId 
      - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
        Action: cognito-idp:AdminCreateUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolCrossCompanyUserPoolV2'
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:GetParametersByPath
          - ssm:GetParameters
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
    environment:
      PARAM_NAME_INVITATIONID_PASS: /${self:custom.stage}/auth/invitationId/password
      PARAM_NAME_INVITATIONID_SALT: /${self:custom.stage}/auth/invitationId/salt
      USER_POOL_ID: !Ref CognitoUserPoolConsumerUserPool

  compUsrList:
    handler: src/companies.getCompanyUsers
    events:
      - http:
          path: /companyUsers/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]      
          - "Fn::GetAtt": [ customersTable, Arn ]            
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          
      
  compUsrPut:
    handler: src/companies.updateUserInCompany
    events:
      - http:
          path: /userInCompany/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]      
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]  

  compUsrRem:
    handler: src/companies.deleteUserInCompany
    events:
      - http:
          path: /userInCompany/{id}
          method: delete
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]    
          - "Fn::GetAtt": [ SettingsTable, Arn ]  
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ customersTable, Arn ]      
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}             
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action: cognito-idp:AdminDisableUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'
      - Effect: Allow
        Action: cognito-idp:AdminEnableUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'              
    environment:
      USER_POOL_ID: 
        Ref: CognitoUserPoolConsumerUserPool

  # lstUsrNtf:
  #   handler: src/userNotifications.listUserNotifications
  #   events:
  #     - http:
  #         path: /userNotifications/
  #         method: get
  #         cors: true
  #         authorizer: aws_iam
  #   iamRoleStatementsInherit: false
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Query
  #         - dynamodb:GetItem
  #       Condition:
  #         ForAllValues:StringEquals:
  #           dynamodb:Attributes:
  #             - companyId
  #             - entityId
  #             - itemId
  #             - userId
  #             - itemData
  #             - itemStatus
  #             - createdAt
  #             - createdBy
  #             - modifiedAt
  #             - modifiedBy
  #             - itemScope
  #         StringEqualsIfExists:
  #           dynamodb:Select: SPECIFIC_ATTRIBUTES
  #           dynamodb:ReturnValues:
  #             - NONE
  #             - UPDATED_OLD
  #             - UPDATED_NEW
  #       Resource:
  #         - "Fn::GetAtt": [ UserNotificationsTable, Arn ]
  #         - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
  #         - Fn::Join:
  #           - '/'
  #           - - Fn::GetAtt: [UserNotificationsTable, Arn ]
  #             - 'index'
  #             - gsiItemsByUserIdAndCreatedAt
  updUsrNtf:
    handler: src/userNotifications.updateUserNotification
    events:
      - http:
          path: /userNotifications
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ UserNotificationsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
  notificationsUpdAll:
    handler: src/userNotifications.updateNotificationsStatus
    events:
      - http:
          path: /notifications/{status}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ UserNotificationsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [UserNotificationsTable, Arn ]
              - 'index'
              - gsiItemsByUserIdAndCreatedAt
  entUsrRem:
    handler: src/users.deleteUserInEntity
    events:
      - http:
          path: /user/{id}
          method: delete
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ JobsTable, Arn ]
          - Fn::GetAtt: [ BudgetsTable, Arn ]

  entUsrAdd:
    handler: src/users.addUserInEntity
    events:
      - http:
          path: /user
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}   

  entUsrPut:
    handler: src/users.updateUserInEntity
    events:
      - http:
          path: /user/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]

  entUsrGet:
    handler: src/users.getUserData
    events:
      - http:
          path: /user
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: AuthSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}    
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action: cognito-idp:AdminUpdateUserAttributes
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - 'userpool/'
              - Ref: 'CognitoUserPoolConsumerUserPool'
            
  entUsrList:
    handler: src/users.getUsersInEntity
    events:
      - http:
          path: /users
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}  

  listEntities:
    handler: src/entities.listEntities
    events:
      - http:
          path: /entities/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]      
          - Fn::Join:
              - "/"
              - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
                - 'index'
                - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
              - "/"
              - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
                - 'index'
                - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::GetAtt: [ customersTable, Arn ]            
          - Fn::Join:
              - "/"
              - - Fn::GetAtt: [customersTable, Arn ]
                - 'index'
                - ${self:custom.gsiItemsByCompanyIdIndexName}

  createEntity:
    handler: src/entities.createEntity
    events:
      - http:
          path: /entities/{id}
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable , Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}

  updateEntity:
    handler: src/entities.updateEntity
    events:
      - http:
          path: /entities/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::GetAtt: [ SettingsTable, Arn ]             
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ customersTable, Arn ]
          - Fn::GetAtt: [ SettingsTable, Arn ] 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable , Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}

  updateEntityStatus:
    handler: src/entities.updateEntityStatus
    events:
      - http:
          path: /entities/{id}/status
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ BudgetsTable, Arn ]

  updateEntityTags:
    handler: src/entities.updateEntityTags
    events:
      - http:
          path: /entities/{id}/tags
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]

  budgetGet:
    handler: src/budgets.getBudget
    events:
      - http:
          path: /budgets/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
  budgetList:
    handler: src/budgets.listBudgets
    events:
      - http:
          path: /budgets
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [BudgetsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
  budgetPut:
    handler: src/budgets.transferBudget
    events:
      - http:
          path: /budget
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}

      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
  setPlannedBudget:
    handler: src/setPlannedBudget.handler
    events:
      - http:
          path: /budgets/plan
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
  createCompanyProvidersFromCsv:
    timeout: 120
    handler: src/bulkOperations/createCompanyProvidersFromCsv.handler
    events:
      - http:
          path: /companyProvidersFromCsv
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}'
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}/index/*'    
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.providersUserPoolId}              
  createMilestonesFromCsv:
    timeout: 120
    handler: src/bulkOperations/createMilestonesFromCsv.handler
    events:
      - http:
          path: /milestonesFromCsv
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.exchangeRatesTableName}'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.companyProvidersTableName}'
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.bidsTableName}'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - ${self:provider.environment.jobSNSTopicArn}
          - ${self:provider.environment.INTERACT_TOPIC_ARN}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.providersUserPoolId}                  
  bulkCreateMilestonesTest:
    timeout: 900
    handler: src/s3FilesProcessor.bulkCreateMilestones
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.providersUserPoolId}        
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}/index/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]    
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: JobsFlowSnsTopic
  processAssignedJobsCsv:
    timeout: 900
    maximumRetryAttempts: 0
    handler: src/s3FilesProcessor.handler
    events:
      - s3:
          bucket: ${self:provider.environment.jobsBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: jobsFlows/new
            - suffix: .csvf 
          existing: true      
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.providersUserPoolId}        
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}/index/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]    
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: JobsFlowSnsTopic
  jobAdd:
    handler: src/jobs.createJob
    events:
      - http:
          path: /jobs
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]    

  mlstnAdd:
    handler: src/jobs.createMilestones
    events:
      - http:
          path: /milestones
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]      
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]      

  jobGetV2:
    handler: src/job/jobGet.handler
    events:
      - http:
          path: /v2/jobs/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::GetAtt: [ JobsTable, Arn ]      
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
 
  jobList:
    timeout: 12
    handler: src/job/jobList.handler
    events:
      - http:
          path: /jobs
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndPOItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - available
              - validFrom
              - validTo
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}

  jobListAttrsPagination:
    handler: src/job/jobListAttrsPagination.handler
    timeout: 30
    events:
      - http:
          path: /jobListAttrsPagination
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - viewData
              - talentId
              - tags
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-alasql:latest   
      
  jobListAttrs:
    timeout: 12
    handler: src/job/jobListAttrs.handler
    environment:
        PAGINATION_TALENT_COMPANY_IDS: VUBIQUITY9abb2670-d68a-11ec-8e07-f7cd2b27f544
        PAGINATION_COMPANY_IDS: 'MIXTILES204af510-1119-11eb-b4ca-2f5af510a69c,IKOBRANDS3120c6f0-1bf2-11ec-b1f4-69e0f2ef9632,MINUTEMEDI7b655c50-452c-11eb-bf38-9b4b64d547fc,IMOCHAIOb10b2e00-6184-11ec-b460-1b5041e04d17,NORTHCOAST92509430-a08d-11ec-8e6e-97982e608a58'
    events:
      - http:
          path: /jobsAttrs
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - talentId
              - viewData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-alasql:latest   
          
  createCsvReport:
    timeout: 30
    handler: src/job/createCsvReport.handler
    events:
      - http:
          path: /csvReport
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - viewData
              - itemStatus
              - createdAt
              - modifiedAt
              - createdBy
              - modifiedBy
              - talentId
              - jobTitle
              - totalPlanned
              - totalRequested
              - totalActual
              - tags
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-alasql:latest   

  createFixedCsvReport:
    timeout: 30
    handler: src/job/createFixedCsvReport.handler
    events:
      - http:
          path: /fixedCsvReport
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - viewData
              - itemStatus
              - createdAt
              - modifiedAt
              - createdBy
              - modifiedBy
              - talentId
              - jobTitle
              - totalPlanned
              - totalRequested
              - totalActual
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ SettingsTable, Arn ]
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'

  jobListByTalent:
    timeout: 12
    handler: src/job/jobListByTalent.handler
    events:
      - http:
          path: /jobsByTalent
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]

  getApprovers:
    handler: src/approvers.handler
    events:
      - http:
          path: /approvers
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
  
  sendRequest:
    handler: src/sendRequest.handler
    timeout: 30
    events:
      - http:
          path: /sendRequest
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]

  jobRem:
    handler: src/jobs.archiveJob
    events:
      - http:
          path: /archiveJob/{id}
          method: put
          cors: true
          authorizer: aws_iam 
      - http:
          path: /archiveJob
          method: put
          cors: true
          authorizer: aws_iam 
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}

  jobPut:
    handler: src/jobs.updateJob
    events:
      - http:
          path: /job/{id}
          method: put
          cors: true
          authorizer: aws_iam
      - http:
          path: /job
          method: put
          cors: true
          authorizer: aws_iam 
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - ${self:provider.environment.jobSNSTopicArn}
          - ${self:provider.environment.INTERACT_TOPIC_ARN}
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'

  startConsumerTalentChat:
    handler: src/chat.startConsumerTalentChat
    events:
      - http:
          path: /job/startchat
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      CONSUMER_URL_DOMAIN: ${self:custom.consumerUrlDomain.${self:custom.stage}, self:custom.consumerUrlDomain.default}
      TALENT_URL_DOMAIN: ${self:custom.talentUrlDomain.${self:custom.stage}, self:custom.talentUrlDomain.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
  
  startConsumerTalentOneOnOneChat:
    handler: src/chat.startOneOnOneConsumerTalentChat
    events:
      - http:
          path: /startOneOnOneChat
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
       - ${self:custom.VPCStaticIPSecurityGroupId}
      subnetIds: 
       - ${self:custom.VPCStaticIPSubnetPrivateId}
    environment:
      CONSUMER_URL_DOMAIN: ${self:custom.consumerUrlDomain.${self:custom.stage}, self:custom.consumerUrlDomain.default}
      TALENT_URL_DOMAIN: ${self:custom.talentUrlDomain.${self:custom.stage}, self:custom.talentUrlDomain.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
        Resource: '*'
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - ${self:custom.talentLakeToken}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/talentCloud/candidates.json'
      - Effect: Allow
        Action:
        - SNS:Publish
        Resource:
          ${self:provider.environment.INTERACT_TOPIC_ARN}

  getChatMembers:
    handler: src/chat.getParticipantsList
    events:
      - http:
          path: /getChatParticipantsList/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}

  updateChatMembers:
    handler: src/chat.changeChatParticipantsList
    events:
      - http:
          path: /changeChatParticipantsList/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}

  jobUpdateTags:
    handler: src/job/jobUpdateTags.handler
    events:
      - http:
          path: /job/{id}/tags
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]

  milestoneUpdateTags:
    handler: src/job/milestoneUpdateTags.handler
    events:
      - http:
          path: /milestone/{id}/tags
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - jobId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - jobId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
            
  milestoneUpdate:
    handler: src/job/milestoneUpdate.handler
    events:
      - http:
          path: /milestone/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - jobId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - jobId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]

  jobUpdateAttrs:
    handler: src/job/jobUpdateAttrs.handler
    events:
      - http:
          path: /jobAttrs/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - talentId
              - jobTitle
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]

  mstPutStatus:
    handler: src/job/updateMilestoneStatus.handler
    timeout: 60 # multi approvals of 100s of milestones can take time
    memorySize: 2048 # this will also give this lambda more cpu
    events:
      - http:
          path: /milestones
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: RejectRequestPaymentTopic
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - externalUserId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - externalUserId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - externalUserId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.exchangeRatesTableName}'

  mstPartialApprove:
    handler: src/job/milestonePartialApprove.handler
    events:
      - http:
          path: /msPartialApprove
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem 
          - dynamodb:Query 
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes: 
              - companyId 
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource: 
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]

  mstBdgtRqst:
    handler: src/job/approveMilestoneBudgetRequest.handler
    timeout: 30
    events:
      - http:
          path: /milestoneBudgetRequest
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          
  msReminder:
    handler: src/job/msReminder.handler
    events:
      - http:
          path: /jobs/{id}/sendReminder
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::GetAtt: [ JobsTable, Arn ]      
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}    

  jobSign:
    handler: src/jobs.hireTalentAndActivateJob
    events:
      - http:
          path: /job/{id}/sign
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TALENT_URL_DOMAIN: ${self:custom.talentUrlDomain.${self:custom.stage}, self:custom.talentUrlDomain.default}
      SEND_LEGAL_DOCS: ${self:custom.sendLegalDocs.${self:custom.stage}, self:custom.sendLegalDocs.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          ${self:provider.environment.INTERACT_TOPIC_ARN}
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}

  innerHireTalent:
    handler: src/jobs.innerHireTalent
    environment:
      TALENT_URL_DOMAIN: ${self:custom.talentUrlDomain.${self:custom.stage}, self:custom.talentUrlDomain.default}
      SEND_LEGAL_DOCS: ${self:custom.sendLegalDocs.${self:custom.stage}, self:custom.sendLegalDocs.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          ${self:provider.environment.INTERACT_TOPIC_ARN}
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}

  jobMove:
    handler: src/job/jobMove.handler
    events:
      - http:
          path: /job/move
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}  
  talentGet:
    handler: src/talents.getTalent
    events:
      - http:
          path: /talent/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]

  talentList:
    handler: src/talents.getTalents
    events:
      - http:
          path: /talents
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]

  bidGet:
    handler: src/bids.getBid
    events:
      - http:
          path: /bids/{id}
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
  bidsList:
    handler: src/bids.getBids
    events:
      - http:
          path: /bids
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
  bidPut:
    handler: src/bids.updateBid
    events:
      - http:
          path: /bid/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.auditQueueName}
  
  contactCandidate:
    handler: src/bids.updateBidOnContactCandidate
    events:
      - http:
          path: /contactCandidate/{id}
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      CONSUMER_URL_DOMAIN: ${self:custom.consumerUrlDomain.${self:custom.stage}, self:custom.consumerUrlDomain.default}
      TALENT_URL_DOMAIN: ${self:custom.talentUrlDomain.${self:custom.stage}, self:custom.talentUrlDomain.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.auditQueueName}  
      - Effect: Allow
        Action:
        - SNS:Publish
        Resource:
          ${self:provider.environment.INTERACT_TOPIC_ARN}

  jobFeedback:
    handler: src/feedback/jobFeedback.handler
    events:
      - http:
          path: /job-feedback
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: InteractTalentTopic
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
     
  bidFeedback:
    handler: src/feedback/bidFeedback.handler
    events:
      - http:
          path: /bid-feedback
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: BidsSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
     
  askStokeAI:
    middleware:
      pre:
        - src/middleware/authorize.handler
    handler: src/stokeAI.askStokeAI
    events:
      - http:
          path: /ask-stokeai
          method: post
          cors: true
          private: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayCognitoAuthorizer
    environment:
      OPENAI_USED_PACKAGE: ${self:custom.OPENAI_USED_PACKAGE}
    timeout: 30
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-openai:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-gpt-3-encoder:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-azureOpenai:latest
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - ${self:custom.openaiSsmArn}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]

  skillList:
    middleware:
      pre:
        - src/middleware/authorize.handler
    handler: src/suggestskills.suggestSkills
    events:
      - http:
          path: /suggestskills
          method: post
          cors: true
          private: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayCognitoAuthorizer
    environment:
      OPENAI_USED_PACKAGE: ${self:custom.OPENAI_USED_PACKAGE}
    timeout: 30
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-openai:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-gpt-3-encoder:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-azureOpenai:latest
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - ${self:custom.openaiSsmArn}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]

  categorySkills:
    handler: src/suggestskills.getCategorySkills
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-openai:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-gpt-3-encoder:latest
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
    events:
      - http:
          path: /categorySkills
          method: get
          cors: true
          authorizer: aws_iam

  homePageStatGet:
    handler: src/homePage.getHomePageStatistics
    timeout: 30
    events:
      - http:
          path: /homePage
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - viewData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}

      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]      
          - "Fn::GetAtt": [ customersTable, Arn ]            
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      
  compPrvGet:
    handler: src/companyProviders.getCompanyProviders
    events:
      - http:
          path: /companyProviders
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - Fn::Join:
              - '/'
              - - Fn::GetAtt: [CompanyProvidersTable, Arn ]
                - 'index'
                - gsiItemByEntityIdAndItemId

      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - talentId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          
  compPrvAdd:
    handler: src/companyProviders.createCompanyProviders
    events:
      - http:
          path: /companyProvider
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      SEND_LEGAL_DOCS: ${self:custom.sendLegalDocs.${self:custom.stage}, self:custom.sendLegalDocs.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.providersUserPoolId}        
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}/index/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}

  providerAddLegalDocs:
    handler: src/providerLegalDocs/providerAddLegalDocs.handler
    events:
      - http:
          path: /companyProvider/{id}/addLegalDocs
          method: put
          cors: true
          authorizer: aws_iam
      - http:
          path: /companyProvider/addLegalDocs
          method: put
          cors: true
          authorizer: aws_iam
    timeout: 30
    environment:
      SEND_LEGAL_DOCS: ${self:custom.sendLegalDocs.${self:custom.stage}, self:custom.sendLegalDocs.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.callToActionQueueName}
          
  prvDepartmentPut:
    handler: src/updateProviderDepartments.handler
    events:
      - http:
          path: /companyProvider/updateDepartments
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}

  compPrvPut:
    handler: src/companyProviders.updateCompanyProvider
    events:
      - http:
          path: /companyProvider/{id}
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      SEND_LEGAL_DOCS: ${self:custom.sendLegalDocs.${self:custom.stage}, self:custom.sendLegalDocs.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}

  compPrvByCandidate:
    handler: src/companyProviders.updateOrCreateCompanyProviderByTalent
    events:
      - http:
          path: /companyProviderByCandidate
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      SEND_LEGAL_DOCS: ${self:custom.sendLegalDocs.${self:custom.stage}, self:custom.sendLegalDocs.default}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}
  
  compPrvResend:
    handler: src/companyProviders.resendInvitation
    events:
      - http:
          path: /companyProviderResend
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}    

  compPrvRem:
    handler: src/companyProviders.archiveCompanyProvider
    events:
      - http:
          path: /archiveCompanyProvider/{id}
          method: put
          cors: true
          authorizer: aws_iam
      - http:
          path: /archiveCompanyProvider
          method: put
          cors: true
          authorizer: aws_iam 
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:BatchWriteItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2} 

  budgetModuleContact:
    handler: src/feedback/budgetModuleFeedback.handler
    events:
      - http:
          path: /budget-feedback
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
  
  achFunding:
    handler: src/operationalTasks/achFunding.handler
    events:
      - http:
          path: /ach-funding
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
            
  contactOperations:
    handler: src/operationalTasks/contactOperations.handler
    events:
      - http:
          path: /contact-operations
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}

  stngsGet:
    handler: src/settings.getSettings
    events:
      - http:
          path: /settings
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
          - Fn::Join:
            - "/" 
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId 
              
  stngsMLPut:
    handler: src/updateMultiLevelSettings.handler
    events:
      - http:
          path: /updateMultiLevelSetting
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
  updateFundingSettings:
    handler: src/updateFundingSettings.handler
    events:
      - http:
          path: /fundingSettings
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.LegalDocsQueueName}
  
  deleteSavedReport:
    handler: src/savedReports.deleteSavedReport
    events:
      - http:
          path: /settings/savedReport/{id}
          method: delete
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndUserId

  getSavedReports:
    handler: src/savedReports.getSavedReports
    events:
      - http:
          path: /settings/savedReport
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndUserId

  updateSavedReport:
    handler: src/savedReports.updateSavedReport
    events:
      - http:
          path: /settings/savedReport/{id}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndUserId
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}

  createSavedReport:
    handler: src/savedReports.createSavedReport
    events:
      - http:
          path: /settings/savedReport
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndUserId
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]

  sharedStngsPut:
    handler: src/sharedSettings.updateSharedSettings
    events:
      - http:
          path: /settings/shared
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]

  stngsPut:
    handler: src/settings.updateSettings
    events:
      - http:
          path: /settings/setting
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: LegalEntitiesSnsTopic
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - Fn::Join:
            - "/" 
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ] 
          - Fn::Join:
            - "/" 
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId 
  

  signedUrl:
    handler: src/s3Files.getSignedUrl
    events:
      - http:
          path: /signedUrl
          method: get
          cors: true
          authorizer: aws_iam
    environment:
      S3_SIGNED_URL_EXPIRED: 300
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:DeleteObject'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
  getInvoices:
    handler: src/invoices.getInvoices
    timeout: 30
    events:
      - http:
          path: /invoices
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      INVOICES_ZIP_SIGNED_URL_EXPIRATION_TIME: 300
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ LedgerTable, Arn ]
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [LedgerTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - viewData
              - itemStatus
              - createdAt
              - modifiedAt
              - createdBy
              - modifiedBy
              - talentId
              - jobTitle
              - totalPlanned
              - totalRequested
              - totalActual
              - tags
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-alasql:latest   
  paymentCycle:
    timeout: 60 # 60 seconds, instead of default is 6, allow cognito to take its time
    handler: src/paymentCycle.handler
    events:
      - http:
          path: /paymentCycle
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - externalUserId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}'
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}/index/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.exchangeRatesTableName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [LedgerTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndJobIdIdx}

  fundPerPaymentCycle:
    timeout: 30
    handler: src/fundPerPaymentCycle.handler
    events:
      - http:
          path: /fundPerPaymentCycle
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - externalUserId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
  
  getBilling:
    handler: src/billing.getBilling
    timeout: 12
    events:
      - http:
          path: /billing
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]      
          - "Fn::GetAtt": [ customersTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}    
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:ListBucket'
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
  stokeInvoices:
    handler: src/stokeInvoices.handler
    events:
      - http:
          path: /stokeInvoices
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: 'Allow'
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:ListBucket
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
  exchangeRates:
    handler: src/exchangeRates.handler
    events:
      - http:
          path: /exchangerates
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.exchangeRatesTableName}'
  createBudgetRequest:
    handler: src/budgetRequests/createBudgetRequest.handler
    events:
      - http:
          path: /budgetRequests
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]

  updateBudgetRequest:
    handler: src/budgetRequests/updateBudgetRequest.handler
    events:
      - http:
          path: /budgetRequests
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
        
  teamUsrRem:
    handler: src/users.deleteUserInTeam
    events:
      - http:
          path: /userInTeam/{id}
          method: delete
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ JobsTable, Arn ]
  talentPublicPDF:
    handler: src/generatePublicPDF.handler
    events:
      - http:
          path: /talent/publicPDF
          method: post
          cors: true
          authorizer: aws_iam
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-pdfkit:latest

    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]

  companyBalance:
    handler: src/companyBalance.handler
    events:
      - http:
          path: /company/{companyId}/balance
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.exchangeRatesTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - externalUserId
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}'
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.providersTableName}/index/*'

  companyBalanceDownloadInvoice:
    handler: src/companyBalance.downloadHandler
    events:
      - http:
          path: /company/{companyId}/balance/{billingId}/invoice
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:ListBucket
          - s3:GetObjectTagging
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}'
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'    
  updateCompany:
    handler: src/companies.updateCompany
    events:
      - http:
          path: /company/{companyId}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
  talentCloudGetCategories:
    handler: src/talentCloud/getCategories.handler
    events:
      - http:
          path: /talentCloud/categories
          method: get
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
       - ${self:custom.VPCStaticIPSecurityGroupId}
      subnetIds: 
       - ${self:custom.VPCStaticIPSubnetPrivateId}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
        Resource: '*'
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - ${self:custom.talentLakeToken}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
  talentCloudGetCandidates:
    handler: src/talentCloud/getCandidates.handler
    events:
      - http:
          path: /talentCloud/search
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: /talentCloud/search/{candidateId}
          method: get
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
       - ${self:custom.VPCStaticIPSecurityGroupId}
      subnetIds: 
       - ${self:custom.VPCStaticIPSubnetPrivateId}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
        Resource: '*'
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - ${self:custom.talentLakeToken}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
  settingsList:
    handler: src/settingsList.handler
    events:
      - http:
          path: list/{entityType}/{entityId}/{listType}
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: list/{entityType}/{entityId}
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: list/{entityType}/{entityId}/{listType}
          method: put
          cors: true
          authorizer: aws_iam
      - http:
          path: list/{entityType}/{entityId}/{listType}/{listName}
          method: patch
          cors: true
          authorizer: aws_iam
      - http:
          path: list/{entityType}/{entityId}/{listType}/{listName}
          method: delete
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
  poList:
    handler: src/purchaseOrders/poList.handler
    events:
      - http:
          path: /poList/{companyId}
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: /poList/{companyId}
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - available
              - validFrom
              - validTo
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndPOItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - itemId
              - poFeesItemId
              - userId
              - itemData
              - entityId
              - talentId
              - itemStatus
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndPOFeesItemIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]

  createPO:
    handler: src/purchaseOrders/createPO.handler
    events:
      - http:
          path: /purchaseOrder/{companyId}
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: /purchaseOrder/{companyId}/{poId}
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - available
              - validFrom
              - validTo
              - tags
              - itemPrivateData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.auditQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic
  
  updatePO:
    handler: src/purchaseOrders/updatePO.handler
    events:
      - http:
          path: /purchaseOrder/{companyId}/{poId}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - available
              - validFrom
              - validTo
              - tags
              - itemPrivateData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.auditQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic

  updatePOsAllocation:
    handler: src/purchaseOrders/updatePOsAllocation.handler
    events:
      - http:
          path: /purchaseOrder/updatePOAllocation/{companyId}
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - available
              - validFrom
              - validTo
              - tags
              - itemPrivateData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - viewData
              - talentId
              - jobTitle
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.auditQueueName}
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: UserActionsSnsTopic

  createWorkflow:
    handler: src/workflows.createWorkflow
    events:
      - http:
          path: /workflow
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
  getWorkflows:
    handler: src/workflows.getWorkflows
    events:
      - http:
          path: /workflow
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - "/" 
            - - Fn::GetAtt: [SettingsTable, Arn ]
              - 'index'
              - gsiItemsByCompanyIdAndItemId 
  
  updateWorkflow:
    handler: src/workflows.updateWorkflow
    events:
      - http:
          path: /workflow
          method: put
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
    
  deleteWorkflow:
    handler: src/workflows.deleteWorkflow
    events:
      - http:
          path: /workflow
          method: delete
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.settingsTableName}'
    
  stokeWebhook:
    handler: src/webhook.handler
    events:
      - http:
          path: /webhook
          method: get
          private: true
          cors:
            origins: true 
    environment:
      webhookQueueName: ${self:custom.webhookQueueName}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - !GetAtt WebhookQueue.Arn
  processWebhookSqs:
    handler: src/processWebhookSqs.handler
    events:
      - sqs:
         arn:
          Fn::GetAtt:
          - WebhookQueue
          - Arn
    environment:
        webhookQueueName: ${self:custom.webhookQueueName}
        jobsTableName: ${self:custom.jobsTableName}
        settingsTableName: ${self:custom.settingsTableName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:GetParametersByPath
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.settingsTableName}'
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.jobsTableName}'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.jobsTableName}'
  domainByEmail:
    handler: src/domain.getDomainByEmail
    events:
      - http:
          path: /domain
          method: get
          private: true
          cors: true
  auditGet:
    handler: src/audit.handler
    timeout: 30
    events:
      - http:
          path: /audit
          method: post
          authorizer: aws_iam
          cors: true
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.auditTableName}'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - available
              - validFrom
              - validTo
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ BudgetsTable, Arn ]
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest       
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-alasql:latest   

  complianceInsightGet:
    handler: src/complianceInsight.handler
    timeout: 30
    events:
      - http:
          path: /complianceInsight
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - viewData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}

      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]      
          - "Fn::GetAtt": [ customersTable, Arn ]            
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
          - Fn::Join:
            - "/"
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
  
  getAllCompanies:
    handler: src/getAllCompanies.getAllCompanies
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [customersTable, Arn]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByItemStatusIdxV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
  
  sendingRelevantReports:
    timeout: 30
    handler: src/scheduleReports.sendingRelevantReports
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-cronSchedule:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-alasql:latest   
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ SettingsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ SettingsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::GetAtt: [ ConsumerUsersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConsumerUsersTable, Arn ]
              - 'index'
              - ${self:custom.gsiUsersByEntityIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - viewData
              - talentId
              - jobTitle
              - poItemId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiViewDataByCompanyIdAndItemId}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ TalentsTable, Arn ]
          - "Fn::GetAtt": [ BidsTable, Arn ]
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdIndexName}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ BudgetsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndItemIdIndexNameV2}
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectTagging'
          - 's3:GetObjectTagging'
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.jobsBucketName}/*'
    
  providerCheckInitiator:
    handler: src/providerCheckInitiator.handler
    events:
      - http:
          path: /backgroundCheck/initiate
          method: post
          authorizer: aws_iam
          cors: true
      - http:
          path: /provider/check/initiate
          method: post
          authorizer: aws_iam
          cors: true
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource:
          - Ref: AuthSnsTopic
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:BatchGetItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - viewData
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:dynamodb'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - 'table/${self:custom.companyProvidersTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}

  updateUserEmail:
    handler: src/users/changeUserEmail.updateUserEmailHandler
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-SendInBlue:latest
    events:
      - http:
          path: /users/{id}/email
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      USER_POOL_ID: !Ref CognitoUserPoolConsumerUserPool
      PARAM_NAME_INVITATIONID_PASS: /${self:custom.stage}/auth/invitationId/password
      PARAM_NAME_INVITATIONID_SALT: /${self:custom.stage}/auth/invitationId/salt
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/'
                - ${self:custom.stage}
                - '*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]      
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ customersTable, Arn ]  
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - Fn::Join:
            - ':'
            -
              - 'arn:aws:sqs'
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.asyncTasksQueueName}
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminUpdateUserAttributes
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.consumerUserPoolId}

  updateUserVerifyEmail:
    handler: src/users/changeUserEmail.updateUserVerifyEmailHandler
    layers:
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-lodash:latest
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.stage}-SendInBlue:latest
    events:
      - http:
          path: /users/verify-email
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      USER_POOL_ID: !Ref CognitoUserPoolConsumerUserPool
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ ConsumerUsersTable, Arn ]      
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ customersTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemByUserIdIndexName}
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminUpdateUserAttributes
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':userpool/'
              - ${self:custom.consumerUserPoolId}

  searchTalents:
    handler: src/talentCloud/searchTalents.handler
    events:
      - http:
          path: /talentCloud/searchTalents
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
       - ${self:custom.VPCStaticIPSecurityGroupId}
      subnetIds: 
       - ${self:custom.VPCStaticIPSubnetPrivateId}
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
        Resource: '*'
      - Effect: Allow
        Action:
          - ssm:GetParameters
        Resource:
          - ${self:custom.talentLakeToken}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'

  optionsMenuActions:
    handler: src/optionsMenuActions.handler
    events:
      - http:
          path: /optionsMenuActions
          method: post
          cors: true
          authorizer: aws_iam
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - Fn::Join:
              - ':'
              -
                - 'arn:aws:dynamodb'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'table/${self:custom.consumerAuthTableName}'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ CompanyProvidersTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ SettingsTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Condition:
          ForAllValues:StringEquals:
            dynamodb:Attributes:
              - companyId
              - entityId
              - itemId
              - userId
              - talentId
              - itemData
              - itemStatus
              - createdAt
              - createdBy
              - modifiedAt
              - modifiedBy
              - itemScope
              - tags
              - talentId
          StringEqualsIfExists:
            dynamodb:Select: SPECIFIC_ATTRIBUTES
            dynamodb:ReturnValues:
              - NONE
              - UPDATED_OLD
              - UPDATED_NEW
        Resource:
          - "Fn::GetAtt": [ JobsTable, Arn ]
          - Fn::Join:
            - '/'
            - - Fn::GetAtt: [JobsTable, Arn ]
              - 'index'
              - ${self:custom.gsiItemsByCompanyIdAndTalentId}

stepFunctions:
  ${file(state-machines.yml)}

resources:
  - ${file(resources/api-gateway.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/sns.yml)}
  - ${file(resources/sqs.yml)}
  - ${file(resources/ses-configuration-set.yml)}
