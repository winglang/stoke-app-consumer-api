'use strict';

// tests for companyProviders.js functions
// Generated by serverless-jest-plugin

const mod = require('../../src/companyProviders');
const jestPlugin = require('serverless-jest-plugin');
const { constants, UsersService, CompanyProvidersService, JobsService, permisionConstants } = require('stoke-app-common-api');
const companyProvidersService = new CompanyProvidersService(process.env.companyProvidersTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const jobsService = new JobsService(process.env.jobsTableName, constants.projectionExpression.defaultAndTagsAttributes, constants.attributeNames.defaultAttributes);
const usersService = new UsersService(process.env.consumerAuthTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapperarchiveCompanyProviders = lambdaWrapper.wrap(mod, { handler: 'archiveCompanyProvider' });

const userId = "JEST-TEST-ARCHIVE-COMPANY-PROVIDERS";
const itemId = `${constants.prefix.provider}JEST-TEST-ARCHIVE-COMPANY-PROVIDERS-ITEM-ID-1`;
const itemId2 = `${constants.prefix.provider}JEST-TEST-ARCHIVE-COMPANY-PROVIDERS-ITEM-ID-2`;
const itemIdTalent = `${constants.prefix.talent}${itemId}`;
const itemIdTalent2 = `${constants.prefix.talent}${itemId2}`;
const companyId = "JEST-TEST-ARCHIVE-COMPANY-PROVIDERS";
const entityId = "JEST-TEST-ARCHIVE-COMPANY-PROVIDERS-ENTITY-ID";
const jobId = `${constants.prefix.job}JEST-TEST-ARCHIVE-COMPANY-PROVIDERS-JOB-ITEM-ID-1`;
const jobId2 = `${constants.prefix.job}JEST-TEST-ARCHIVE-COMPANY-PROVIDERS-JOB-ITEM-ID-2`;
const name = 'Test';
const name2 = 'Test 2';

const job = {
    userId,
    entityId,
    itemId: jobId,
    itemStatus: constants.job.status.archived,
    itemData: { talentId: itemIdTalent },
    createdBy: userId,
    companyId
};

const job2 = {
    userId,
    entityId,
    itemId: jobId2,
    itemStatus: constants.job.status.archived,
    itemData: { talentId: itemIdTalent2 },
    createdBy: userId,
    companyId
};

const provider = {
    itemId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.invited,
    itemData: {
        name
    }
};

const provider2 = {
    itemId: itemId2,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.invited,
    itemData: {
        name: name2
    }
};

const talent = {
    itemId: itemIdTalent,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.invited,
    itemData: {
        name
    }
};

const talent2 = {
    itemId: itemIdTalent2,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.invited,
    itemData: {
        name: name2
    }
};


const providerEvent = {
    body: JSON.stringify({ companyId }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const talentEvent = {
    body: JSON.stringify({ companyId }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemIdTalent
    }
}


const providerNoAllowEvent = {
    body: JSON.stringify({
        companyId: companyId + '_COMPANY'
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const providerMissingCompanyIdEvent = {
    body: JSON.stringify({}),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const providerMissingItemIdEvent = {
    body: JSON.stringify({ companyId }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: null
    }

}

const providerBulkEvent = {
    body: JSON.stringify({ companyId, ids: [itemId, itemId2] }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
}

const talentBulkEvent = {
    body: JSON.stringify({ companyId, ids: [itemIdTalent, itemIdTalent2] }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
}

const providerMissingItemIdBulkEvent = {
    body: JSON.stringify({ companyId }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
}

const user = {
    userId,
    entityId: userId,
    companyId,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.admin, permissionsComponents: { [permisionConstants.permissionsComponentsKeys.talents]: { isEditor: true } } }
};

const userNotAdmin = {
    userId: 'notAdmin',
    entityId: companyId,
    companyId,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.user, isEditor: true }
};

const notAuthorizedEvent = {
    body: JSON.stringify({ companyId }),
    requestContext: {
        identity: {
            cognitoIdentityId: userNotAdmin.userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

describe('archiveCompanyProvider', () => {
    beforeEach(async () => {
        let response = await companyProvidersService.create(provider);
        expect(response.itemId).toBe(itemId);
        response = await companyProvidersService.create(talent);
        expect(response.itemId).toBe(itemIdTalent);
        response = await companyProvidersService.create(provider2);
        expect(response.itemId).toBe(itemId2);
        response = await companyProvidersService.create(talent2);
        expect(response.itemId).toBe(itemIdTalent2);
        response = await usersService.create(user);
        expect(response).toEqual(user);
        response = await usersService.create(userNotAdmin);
        expect(response).toEqual(userNotAdmin);
        response = await jobsService.create(job);
        expect(response.itemId).toBe(jobId);
        response = await jobsService.create(job2);
        expect(response.itemId).toBe(jobId2);
    });

    it('remove company provider in bulk, expect 200, and test data', async () => {
        let response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
        response = await wrapperarchiveCompanyProviders.run(providerBulkEvent)
        expect(response.statusCode).toBe(200);

        response = await companyProvidersService.get(companyId, itemId);
        expect(response).toMatchObject({
            itemData: { name: name }
        });
        response = await companyProvidersService.get(companyId, itemId2);
        expect(response).toMatchObject({
            itemData: { name: name2 }
        });
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(0);
    });

    it('remove talent company provider in bulk, expect 200, and test data', async () => {
        let response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
        response = await wrapperarchiveCompanyProviders.run(talentBulkEvent)
        expect(response.statusCode).toBe(200);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(2);
    });

    it('remove company providers in bulk, expect 200, and test data', async () => {
        let response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
        response = await wrapperarchiveCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);

        response = await companyProvidersService.get(companyId, itemId);
        expect(response).toMatchObject({
            itemData: { name: name }
        });
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(2);
    });

    it('remove talent company provider, expect 200, and test data', async () => {
        let response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
        response = await wrapperarchiveCompanyProviders.run(talentEvent)
        expect(response.statusCode).toBe(200);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(3);
    });

    it('remove company provider with status registered without jobs, expect 200, and test data', async () => {
        let response = await companyProvidersService.update({ itemId, companyId, modifiedBy: 'test', itemStatus: constants.companyProvider.status.registered });
        expect(response.Attributes.itemStatus).toBe(constants.companyProvider.status.registered);
        response = await wrapperarchiveCompanyProviders.run(notAuthorizedEvent)
        expect(response.statusCode).toBe(200);
        response = await companyProvidersService.update({ itemId, companyId, modifiedBy: 'test', itemStatus: constants.companyProvider.status.registered });
        expect(response.Attributes.itemStatus).toBe(constants.companyProvider.status.registered);
        response = await wrapperarchiveCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
        for (let i = 0; i < response.length; i++) {
            const res = response[i];
            if ([itemId, itemIdTalent].includes(res.itemId)) {
                expect(res.itemStatus).toBe(constants.companyProvider.status.inactive)
            }
        }
    });


    it('User not allow , expect 403', async () => {
        const response = await wrapperarchiveCompanyProviders.run(providerNoAllowEvent)
        expect(response.statusCode).toBe(403);
    });

    it('missing company id , expect 500', async () => {
        const response = await wrapperarchiveCompanyProviders.run(providerMissingCompanyIdEvent)
        expect(response.statusCode).toBe(500);
    });

    it('missing item id , expect 500', async () => {
        let response = await wrapperarchiveCompanyProviders.run(providerMissingItemIdEvent)
        expect(response.statusCode).toBe(500);
        response = await wrapperarchiveCompanyProviders.run(providerMissingItemIdBulkEvent)
        expect(response.statusCode).toBe(500);
    });

    it('check is editor , expect 403', async () => {
        await usersService.update({
            userId: user.userId, entityId: user.entityId, modifiedBy: user.userId, itemData: {
                userRole: constants.user.role.admin,
                isEditor: false
            }
        })
        const response = await wrapperarchiveCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(403);
    });

    it('remove company provider with job, expect 403, and test data', async () => {
        let response = await jobsService.update({ itemId: jobId, entityId, itemStatus: constants.job.status.active, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.active);
        response = await wrapperarchiveCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(403);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
    });

    it('remove company provider with job in and one without jobs in bulk, expect 200', async () => {
        let response = await jobsService.update({ itemId: jobId, entityId, itemStatus: constants.job.status.active, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.active);
        response = await wrapperarchiveCompanyProviders.run(providerBulkEvent)
        expect(response.statusCode).toBe(200);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(2);
    });

    it('remove company 2 provider with jobs in bulk, expect 403', async () => {
        let response = await jobsService.update({ itemId: jobId, entityId, itemStatus: constants.job.status.active, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.active);
        response = await jobsService.update({ itemId: jobId2, entityId, itemStatus: constants.job.status.active, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.active);
        response = await wrapperarchiveCompanyProviders.run(providerBulkEvent)
        expect(response.statusCode).toBe(403);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
        response = await jobsService.update({ itemId: jobId, entityId, itemStatus: constants.job.status.archived, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.archived);
        response = await jobsService.update({ itemId: jobId2, entityId, itemStatus: constants.job.status.archived, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.archived);
    });

    it('remove talent company provider with job, expect 403, and test data', async () => {
        let response = await jobsService.update({ itemId: jobId, entityId, itemStatus: constants.job.status.active, modifiedBy: userId });
        expect(response.Attributes.itemStatus).toBe(constants.job.status.active);
        response = await wrapperarchiveCompanyProviders.run(talentEvent)
        expect(response.statusCode).toBe(403);
        response = await companyProvidersService.listCompany(companyId);
        expect(response.length).toBe(4);
    });

    afterEach(async () => {
        //cleanup
        let result = await companyProvidersService.delete(companyId, itemId);
        expect(result).toBe(true);
        result = await companyProvidersService.delete(companyId, itemId2);
        expect(result).toBe(true);
        result = await companyProvidersService.delete(companyId, itemIdTalent);
        expect(result).toBe(true);
        result = await companyProvidersService.delete(companyId, itemIdTalent2);
        expect(result).toBe(true);
        result = await usersService.delete(userId, userId);
        expect(result).toBe(true);
        result = await usersService.delete(userNotAdmin.userId, userNotAdmin.entityId);
        expect(result).toBe(true);
    });
});

