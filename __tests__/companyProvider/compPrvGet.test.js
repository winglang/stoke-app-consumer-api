'use strict';

// tests for companyProviders.js functions
// Generated by serverless-jest-plugin

const _ = require('lodash');
const mod = require('../../src/companyProviders');
const jestPlugin = require('serverless-jest-plugin');
const { constants, UsersService, CompanyProvidersService, TalentsService, CompaniesService, SettingsService, permisionConstants } = require('stoke-app-common-api');
const companyProvidersService = new CompanyProvidersService(process.env.companyProvidersTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const usersService = new UsersService(process.env.consumerAuthTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const talentsService = new TalentsService(process.env.talentsTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const companiesService = new CompaniesService(process.env.customersTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const settingsService = new SettingsService(process.env.settingsTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapperGetCompanyProviders = lambdaWrapper.wrap(mod, { handler: 'getCompanyProviders' });

const userId = "JEST-TEST-GET-COMPANY-PROVIDERS";
const itemId = `${constants.prefix.talent}${constants.prefix.provider}JEST-TEST-GET-COMPANY-PROVIDERS-ITEM-ID`;
const itemId2 = `${constants.prefix.talent}${constants.prefix.provider}JEST2-TEST2-GET-COMPANY-PROVIDERS2-ITEM-ID2`;
const provItemId = `${constants.prefix.provider}JEST-TEST-GET-COMPANY-PROVIDERS-ITEM-ID`;
const provItemId2 = `${constants.prefix.provider}JEST2-TEST2-GET-COMPANY-PROVIDERS2-ITEM-ID2`;
const provItemId3 = `${constants.prefix.provider}JEST2-TEST3-GET-COMPANY-PROVIDERS2-ITEM-ID3`;
const provItemId4 = `${constants.prefix.provider}JEST2-TEST3-GET-COMPANY-PROVIDERS2-ITEM-ID4`;
const provItemId5 = `${constants.prefix.provider}JEST2-TEST3-GET-COMPANY-PROVIDERS2-ITEM-ID5`;
const provItemId6 = `${constants.prefix.provider}JEST2-TEST3-GET-COMPANY-PROVIDERS2-ITEM-ID6`;
const provItemId7 = `${constants.prefix.provider}JEST2-TEST3-GET-COMPANY-PROVIDERS2-ITEM-ID7`;
const provItemId8 = `${constants.prefix.provider}JEST2-TEST3-GET-COMPANY-PROVIDERS2-ITEM-ID8`;




const companyId = "JEST-TEST-GET-COMPANY-PROVIDERS";
const companyId2 = "JEST-TEST-GET-COMPANY-PROVIDERS2";
const entityId = "JEST-TEST-GET-COMPANY-PROVIDERS";
const name = 'Test';

const compTalent = {
    itemId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.user.status.active,
    itemData: {
        name
    }
};

const compTalent2 = {
    itemId: itemId2,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.user.status.invited,
    itemData: {
        name
    }
};

const compProvider = {
    itemId: provItemId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.user.status.active,
    itemData: {}
};

const compProvider2 = {
    itemId: provItemId2,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.user.status.invited,
    itemData: {}
};

const compProvider3 = {
    itemId: provItemId3,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.active,
    itemData: {
        isProviderSelfEmployedTalent: true,
        legalCompliance: {
            score: "red",
            lastUpdated: "2022-12-12T08:16:23+00:00",
            contractElements: {
                "Service Agreement": {
                    documents: [],
                    status: "missing"
                }
            }
        }
    }
};

const compProvider4 = {
    itemId: provItemId4,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.active,
    itemData: {
        isProviderSelfEmployedTalent: true,
        isPayable: true,
        paymetMethod: 'Check',
        legalCompliance: {
            score: "green",
            lastUpdated: "2022-12-12T08:16:23+00:00",
            contractElements: {
            }
        },
        taxCompliance: {
            score: 'green',
        },
        workforceComplianceStatus: {
            score: 'green',
        },
    }
};

const compProvider5 = {
    itemId: provItemId5,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.active,
    itemData: {
        isProviderSelfEmployedTalent: true,
        isPayable: false,
        paymetMethod: 'Check',
        legalCompliance: {
            score: "green",
            lastUpdated: "2022-12-12T08:16:23+00:00",
            contractElements: {
            }
        },
        taxCompliance: {
            score: 'green',
        },
        workforceComplianceStatus: {
            score: 'green',
        },
    }
};

const compProvider6 = {
    itemId: provItemId6,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.active,
    itemData: {
        isProviderSelfEmployedTalent: true,
        isPayable: true,
        paymetMethod: 'Check',
        legalCompliance: {
            score: "green",
            lastUpdated: "2022-12-12T08:16:23+00:00",
            contractElements: {
            }
        },
        taxCompliance: {
            score: 'red',
        },
        workforceComplianceStatus: {
            score: 'green',
        },
    }
};

const compProvider7 = {
    itemId: provItemId7,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.active,
    itemData: {
        isProviderSelfEmployedTalent: true,
        isPayable: true,
        paymentMethod: 'ACH',
        legalCompliance: {
            score: "green",
            lastUpdated: "2022-12-12T08:16:23+00:00",
            contractElements: {
            }
        },
        taxCompliance: {
            score: 'green',
        },
        workforceComplianceStatus: {
            score: 'green',
        },
    }
};

const compProvider8 = {
    itemId: provItemId8,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.active,
    itemData: {
        isProviderSelfEmployedTalent: true,
        isPayable: true,
        paymentMethod: 'Check',
        legalCompliance: {
            score: "red",
            lastUpdated: "2022-12-12T08:16:23+00:00",
            contractElements: {
            }
        },
        taxCompliance: {
            score: 'green',
        },
        workforceComplianceStatus: {
            score: 'green',
        },
    }
};


const companySettings = {
    itemId: `comp_${companyId}`,
    companyId,
    createdAt: 1622550981336,
    entityId: companyId,
    itemData: {
        legalCompliancePolicy: {
            enabled: true,
            values: {
                requireLegalComplianceSettings: true,
                requireLegalDocsSignSettings: false
            }
        },
        legalEntities: {
            "LEGALDOCS74167b30-76d7-11ed-9891-871cf14511d0": {
                "displayName": "LegalDocs",
                "isDefault": true,
                "legalDocs": {
                    "Service Agreement": {
                        "expirationMonths": 0,
                        "fileName": "Service_Agreement.pdf",
                        "id": "Service Agreement_f18505365bfd",
                        "policies": [
                            "always",
                            "sensitiveDataExposure",
                            "systemAccess",
                            "onSiteAccess"
                        ],
                        "s3Path": "legelEntities/LegalDocs/1670490371806-Service_Agreement.pdf",
                        "sendDocumentsToTalent": true,
                        "tags": [
                            "Service Agreement"
                        ],
                        "templateName": "Service Agreement"
                    }
                },
                "location": "IL"
            },
        },
        payments: {
            disabledPaymentMethods: {
                'ACH': true,
            },
        },
    },
    itemStatus: constants.settings.status.active,
    modifiedAt: 1670832867573,
    modifiedBy: userId,
    userId
}

const providerNoAllowEvent = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    queryStringParameters: {
        companyId: companyId + '-COMPANY'
    }
}

const providerMissingCompanyIdEvent = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    queryStringParameters: {
    }

}

const talent = {
    itemId,
    itemData: {
        talentName: 'TALENT_5'
    }
}

const user = {
    userId,
    entityId: userId,
    companyId,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.admin }
};

/////////////////////////////////////
// Data for authorised talents fetch
//
const companyAdminUserId = "JEST-TEST-GET-COMPANY-PROVIDERS-ADM";
const notHiringManagerUserId = "JEST-TEST-GET-COMPANY-PROVIDERS-USER";
const entityId_1 = "JEST-TEST-GET-COMPANY-PROVIDERS-ENT1";
const entityId_2 = "JEST-TEST-GET-COMPANY-PROVIDERS-ENT2";
const adminUserId_ENT1 = "JEST-TEST-GET-COMPANY-PROVIDERS-ADM-ENT1";
const adminUserId_ENT2 = "JEST-TEST-GET-COMPANY-PROVIDERS-ADM-ENT2";
const userId_ENT1 = "JEST-TEST-GET-COMPANY-PROVIDERS-USR-ENT1";
const providerId_1 = `${constants.prefix.provider}JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT1`;
const providerId_2 = `${constants.prefix.provider}JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT2`;
const providerId_1_talent = `${constants.prefix.talent}${constants.prefix.provider}JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT1`;
const providerId_2_talent = `${constants.prefix.talent}${constants.prefix.provider}JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT2`;


const provider1Talent = {
    companyId: companyId2,
    itemId: providerId_1_talent,
    createdBy: adminUserId_ENT1,
    itemData: {
        providerId: providerId_1
    },
    modifiedBy: adminUserId_ENT1,
    itemStatus: constants.user.status.active
};

const provider1 = {
    companyId: companyId2,
    itemId: providerId_1,
    createdBy: adminUserId_ENT1,
    itemData: {
        providerName: "JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT1"
    },
    modifiedBy: adminUserId_ENT1,
    itemStatus: constants.user.status.active
};

const provider2Talent = {
    companyId: companyId2,
    itemId: providerId_2_talent,
    createdBy: adminUserId_ENT2,
    itemData: {

        providerId: providerId_2
    },
    modifiedBy: adminUserId_ENT2,
    itemStatus: constants.user.status.active
};
const provider2 = {
    companyId: companyId2,
    itemId: providerId_2,
    createdBy: adminUserId_ENT2,
    itemData: {
        providerName: "JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT2"
    },
    modifiedBy: adminUserId_ENT2,
    itemStatus: constants.user.status.active
};

const companyAdmin = {
    userId: companyAdminUserId,
    entityId: companyId2,
    companyId: companyId2,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.admin,
        permissionsComponents: { [permisionConstants.permissionsComponentsKeys.talents]: { } }
     }
}
const notHiringManagerUser = {
    userId: notHiringManagerUserId,
    entityId: userId_ENT1,
    companyId: companyId2,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.user }
}
const user_ENT1 = {
    userId: userId_ENT1,
    entityId: entityId_1,
    companyId: companyId2,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.user }
};
const adminUser_ENT1 = {
    userId: adminUserId_ENT1,
    entityId: entityId_1,
    companyId: companyId2,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.admin }
};
const adminUser_ENT2 = {
    userId: adminUserId_ENT2,
    entityId: entityId_2,
    companyId: companyId2,
    itemStatus: constants.user.status.active,
    itemData: { userRole: constants.user.role.admin }
};
const entity_1 = {
    companyId: companyId2,
    itemId: `entity_${entityId_1}`,
    userId: adminUserId_ENT1,
    itemData: {
        entityName: entityId_1,
        costCenter: entityId_1,
    },
    createdBy: adminUserId_ENT1,
    modifiedBy: adminUserId_ENT1,
    itemStatus: constants.user.status.active
};
const entity_2 = {
    companyId: companyId2,
    itemId: `entity_${entityId_2}`,
    userId: adminUserId_ENT2,
    itemData: {
        entityName: entityId_2,
        costCenter: entityId_2,
    },
    createdBy: adminUserId_ENT2,
    modifiedBy: adminUserId_ENT2,
    itemStatus: constants.user.status.active
};

describe('getUsersOfCompany', () => {
    beforeAll(async () => {
        let result = await companyProvidersService.create(compTalent);
        expect(result.itemId).toBe(compTalent.itemId);
        result = await companyProvidersService.create(compTalent2);
        expect(result.itemId).toBe(compTalent2.itemId);
        result = await companyProvidersService.create(compProvider);
        expect(result.itemId).toBe(compProvider.itemId);
        result = await companyProvidersService.create(compProvider2);
        expect(result.itemId).toBe(compProvider2.itemId);
        result = await companyProvidersService.create(compProvider3);
        expect(result.itemId).toBe(compProvider3.itemId);
        result = await companyProvidersService.create(compProvider4);
        expect(result.itemId).toBe(compProvider4.itemId);
        result = await companyProvidersService.create(compProvider5);
        expect(result.itemId).toBe(compProvider5.itemId);
        result = await companyProvidersService.create(compProvider6);
        expect(result.itemId).toBe(compProvider6.itemId);
        result = await companyProvidersService.create(compProvider7);
        expect(result.itemId).toBe(compProvider7.itemId);
        result = await companyProvidersService.create(compProvider8);
        expect(result.itemId).toBe(compProvider8.itemId);
        result = await companyProvidersService.create(provider1Talent);
        expect(result.itemId).toBe(provider1Talent.itemId);
        result = await companyProvidersService.create(provider2Talent);
        expect(result.itemId).toBe(provider2Talent.itemId);
        result = await companyProvidersService.create(provider2);
        expect(result.itemId).toBe(provider2.itemId);
        result = await companyProvidersService.create(provider1);
        expect(result.itemId).toBe(provider1.itemId);
        result = await talentsService.create(talent);
        expect(result.itemId).toBe(talent.itemId);
        result = await usersService.create(user);
        expect(result).toEqual(user);
        result = await usersService.create(companyAdmin);
        expect(result).toEqual(companyAdmin);
        result = await usersService.create(notHiringManagerUser);
        expect(result).toEqual(notHiringManagerUser);
        result = await companiesService.create(entity_1);
        expect(result.itemData.entityName).toBe(entity_1.itemData.entityName);
        result = await companiesService.create(entity_2);
        expect(result.itemData.entityName).toBe(entity_2.itemData.entityName);
        result = await usersService.create(user_ENT1);
        expect(result).toEqual(user_ENT1);
        result = await usersService.create(adminUser_ENT1);
        expect(result).toEqual(adminUser_ENT1);
        result = await usersService.create(adminUser_ENT2);
        expect(result).toEqual(adminUser_ENT2);
        result = await settingsService.create(companySettings);
        expect(result).toEqual(companySettings);
    });

    it('get users, expect 200, and test data', async () => {
        const providerEvent = {
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,

                filter: 'talent_'
            }
        }
        let response = await wrapperGetCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        let body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(2);
        expect(body.companyProviders).toMatchObject([{
            itemData: {
                name,
            },
            itemId
        },
        {
            itemData: {
                name,
            },
            itemId: itemId2
        }]
        );
        providerEvent.queryStringParameters.itemId = itemId;
        response = await wrapperGetCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        body = JSON.parse(response.body);
        expect(body.companyProviders).toMatchObject([{
            itemData: {
                name,
            },
            itemId
        }]
        );
        providerEvent.queryStringParameters.itemId = null;
        providerEvent.queryStringParameters.filter = 'provider_';
        response = await wrapperGetCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(8);
        providerEvent.queryStringParameters.filter = 'talent_';
        response = await wrapperGetCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(2);
        await companyProvidersService.update({ companyId, itemId, entityId, modifiedBy: userId });
        response = await wrapperGetCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(2);
        expect(body.companyProviders).toMatchObject([{
            itemData: {
                name,
            },
            itemId
        },
        {
            itemData: {
                name,
            },
            itemId: itemId2
        }]
        );
        providerEvent.queryStringParameters.filter = 'provider_';
        response = await wrapperGetCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(8);
    });

    it('get company compTalent by id along with company talents, expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId,
                isFetchCompanyTalentData: true,
                filter: 'talent_'
            }

        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(2);
        expect(body.companyProviders[0].itemStatus).toBe(constants.companyProvider.status.active)
        expect(body.companyProviders[1].itemStatus).toBe(constants.companyProvider.status.active)
        expect(body.companyProviders[0].allowedActions).toMatchObject({
            deactivate: { value: true },
            cancelInvitation: { value: false },
            removeTalent: { value: false }
        })

    });

    it('get invited talent allowed actions, expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId2,
                isFetchCompanyTalentData: true,
                filter: 'talent_'
            }

        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(2);
        expect(body.companyProviders[0].allowedActions).toMatchObject({
            deactivate: { value: false },
            cancelInvitation: { value: true },
            removeTalent: { value: false },
            startJob: { value: true },
            requestPayment: { value: true }
        })

    });

    it('get not compliant (legal) talent allowed actions, expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId3
            }

        });

        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(1);
        expect(body.companyProviders[0].allowedActions).toMatchObject({
            cancelInvitation: { value: false },
            removeTalent: { value: false },
            deactivate: { value: true },
            startJob: { value: false, warning: true },
            requestPayment: { value: true, warning: true, warningList: [ 'legalNotCompliantTalent' ] }
          })

    });

    it('get only authorized jobs in company providers for hiringManager of 2 entities , expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId_ENT1
                }
            },
            queryStringParameters: {
                companyId: companyId2,
                isFetchAuthorisedTalentData: true
            }

        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(4);
    });

    it('get only authorized jobs in company providers for entity admin, expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: adminUserId_ENT1
                }
            },
            queryStringParameters: {
                companyId: companyId2,
                isFetchAuthorisedTalentData: true
            }

        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(4);
    });

    it('get only authorized jobs in company providers for company admin, expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: companyAdminUserId
                }
            },
            queryStringParameters: {
                companyId: companyId2,
                isFetchAuthorisedTalentData: true
            }
        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(4);
    });

    it('get only authorized company providers for notHiringManager, expect data & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: notHiringManagerUserId
                }
            },
            queryStringParameters: {
                companyId: companyId2,
                isFetchAuthorisedTalentData: true
            }

        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(4);
        let providerItemData = body.companyProviders[2].itemData;
        expect(providerItemData).toMatchObject({ providerId: 'provider_JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT1' });
        providerItemData = body.companyProviders[3].itemData;
        expect(providerItemData).toMatchObject({ providerId: 'provider_JEST-TEST-GET-COMPANY-PROVIDERS-PRV-ENT2' });
    });



    it('User not allow , expect 403', async () => {
        const response = await wrapperGetCompanyProviders.run(providerNoAllowEvent)
        expect(response.statusCode).toBe(403);
    });

    it('missing company id , expect 500', async () => {
        const response = await wrapperGetCompanyProviders.run(providerMissingCompanyIdEvent)
        expect(response.statusCode).toBe(500);
    });

    it('payable status , expect payable green & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId4
            }
    
        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(1);
        expect(body.companyProviders[0].payableStatus).toMatchObject({
                payableStatus: 'green',
                isPayableValid: true,
                payableSummary: {
                    payableElements: {
                        paymentDetailsSubmitted: true,
                        taxFormsSubmitted: true,
                    },
                    paymentConditions: {
                        paymentMethodAllowed: true,
                        mandatoryLegalDocsSigned: true,
                    },
                },
                taxFormStatusInfo: "",
            }
        );
    });

    it('payable status , expect payable red - payment details not submitted & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId5
            }
    
        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(1);
        expect(body.companyProviders[0].payableStatus).toMatchObject({
                payableStatus: 'red',
                isPayableValid: false,
                payableSummary: {
                    payableElements: {
                        paymentDetailsSubmitted: false,
                        taxFormsSubmitted: true,
                    },
                    paymentConditions: {
                        paymentMethodAllowed: true,
                        mandatoryLegalDocsSigned: true,
                    },
                },
                taxFormStatusInfo: "",
            }
        );
    });

    it('payable status , expect payable red - tax forms not submitted & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId6
            }
    
        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(1);
        expect(body.companyProviders[0].payableStatus).toEqual({
                payableStatus: 'red',
                isPayableValid: false,
                payableSummary: {
                    payableElements: {
                        paymentDetailsSubmitted: true,
                        taxFormsSubmitted: false,
                    },
                    paymentConditions: {
                        paymentMethodAllowed: true,
                        mandatoryLegalDocsSigned: true,
                    },
                },
                taxFormStatusInfo: "",
            }
        );
    });

    it('payable status , expect payable yellow - payment method not allowed & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId7
            }
    
        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(1);
        expect(body.companyProviders[0].payableStatus).toEqual({
                payableStatus: 'yellow',
                isPayableValid: false,
                payableSummary: {
                    payableElements: {
                        paymentDetailsSubmitted: true,
                        taxFormsSubmitted: true,
                    },
                    paymentConditions: {
                        paymentMethodAllowed: false,
                        mandatoryLegalDocsSigned: true,
                    },
                },
                taxFormStatusInfo: "",
            }
        );
    });

    it('payable status , expect payable yellow - requireLegalComplianceSettings is on and not legal compliant & 200', async () => {
        const response = await wrapperGetCompanyProviders.run({
            requestContext: {
                identity: {
                    cognitoIdentityId: userId
                }
            },
            queryStringParameters: {
                companyId,
                itemId: provItemId8
            }
    
        });
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.companyProviders.length).toBe(1);
        expect(body.companyProviders[0].payableStatus).toEqual({
                payableStatus: 'yellow',
                isPayableValid: false,
                payableSummary: {
                    payableElements: {
                        paymentDetailsSubmitted: true,
                        taxFormsSubmitted: true,
                    },
                    paymentConditions: {
                        paymentMethodAllowed: true,
                        mandatoryLegalDocsSigned: false,
                    },
                },
                taxFormStatusInfo: "",
            }
        );
    });

    

    afterAll(async () => {
        await companyProvidersService.delete(compTalent.companyId, compTalent.itemId);
        await companyProvidersService.delete(compTalent2.companyId, compTalent2.itemId);
        await companyProvidersService.delete(compProvider.companyId, compProvider.itemId);
        await companyProvidersService.delete(compProvider2.companyId, compProvider2.itemId);
        await companyProvidersService.delete(compProvider3.companyId, compProvider3.itemId);
        await companyProvidersService.delete(compProvider4.companyId, compProvider4.itemId);
        await companyProvidersService.delete(compProvider5.companyId, compProvider5.itemId);
        await companyProvidersService.delete(compProvider6.companyId, compProvider6.itemId);
        await companyProvidersService.delete(compProvider7.companyId, compProvider7.itemId);
        await companyProvidersService.delete(compProvider8.companyId, compProvider8.itemId);
        await companyProvidersService.delete(provider1.companyId, provider1.itemId);
        await companyProvidersService.delete(provider2.companyId, provider2.itemId);
        await companyProvidersService.delete(provider1Talent.companyId, provider1Talent.itemId);
        await companyProvidersService.delete(provider2Talent.companyId, provider2Talent.itemId);
        await usersService.delete(userId, userId);
        await talentsService.delete(talent.itemId);
        await usersService.delete(adminUserId_ENT1, entityId_1);
        await usersService.delete(adminUserId_ENT2, entityId_2);
        await usersService.delete(userId_ENT1, entityId_1);
        await usersService.delete(companyAdminUserId, companyId2);
        await usersService.delete(notHiringManagerUserId, userId_ENT1);
        await companiesService.delete(`entity_${entityId_1}`);
        await companiesService.delete(`entity_${entityId_2}`);
        await settingsService.delete(companySettings.itemId);
    });
});

