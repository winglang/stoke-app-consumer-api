/* eslint-disable max-lines-per-function */
'use strict';

// tests for companyProviders.js functions
// Generated by serverless-jest-plugin

const mod = require('../../src/companyProviders');
const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapperUpdateCompanyProviders = lambdaWrapper.wrap(mod, { handler: 'updateCompanyProvider' });

const { constants, UsersService, CompanyProvidersService, permisionConstants } = require('stoke-app-common-api');
const updateNewDocument = require('./data/updateNewDocument');
const companyProvidersService = new CompanyProvidersService(process.env.companyProvidersTableName, constants.projectionExpression.defaultAndTagsAttributes, constants.attributeNames.defaultAttributes);
const usersService = new UsersService(process.env.consumerAuthTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);

const userId = "JEST-TEST-UPDATE-COMPANY-PROVIDERS";
const userId2 = "JEST-TEST-UPDATE-COMPANY-PROVIDERS2";
const itemId = "provider_JEST-TEST-UPDATE-COMPANY-PROVIDERS-ITEM-ID";
const entityId = "JEST-TEST-UPDATE-COMPANY-PROVIDERS-ENTITY-ID";
const companyId = "JEST-TEST-UPDATE-COMPANY-PROVIDERS";
const name = 'Test';
const newName = 'newTest';
const childItemId = "talent_provider_JEST-TEST-UPDATE-COMPANY-PROVIDERS-ITEM-IDtalent_ITEM-ID";

const providerIds = [
    itemId,
    "provider_JEST-TEST-UPDATE-COMPANY-PROVIDERS-ITEM-ID-1",
    "provider_JEST-TEST-UPDATE-COMPANY-PROVIDERS-ITEM-ID-2",
    "provider_JEST-TEST-UPDATE-COMPANY-PROVIDERS-ITEM-ID-3",
]

const provider = {
    itemId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemData: {
        name,
        legalDocuments: [
            {
                name: "Independent Consulting Agreement",
                legalEntityName: "Sportority Inc",
                status: "sent",
                signature_request_id: "d2f00cb5-46d2-4160-9c4b-b26dde1e7263"
            },
        ]
    },
    tags: {
        originalValue: ["123"],
    },
};

const provider2 = {
    itemId: providerIds[1],
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemData: {
        name,
        legalDocuments: []
    },
    tags: {
        originalValue: ["123"],
    },
};

const provider3 = {
    itemId: providerIds[2],
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemData: {
        name,
        legalDocuments: []
    },
    tags: {
        originalValue: ["123"],
    },
};

const provider4 = {
    itemId: providerIds[3],
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemData: {
        name,
        legalDocuments: []
    },
    tags: {
        originalValue: ["123"],
    },
};

const childProvider = {
    itemId: childItemId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.companyProvider.status.invited,
    itemData: {
        isProviderSelfEmployedTalent: true
    },
};

const tags = {
    country: ["IL"],
    taxStatus: ["Approved"],
};

const tagsAfterUpdate = {
    originalValue: ["123"],
    country: ["IL"],
    taxStatus: ["Approved"],
}

const tagsAfterUpdateOverride = {
    originalValue: ["111"],
    country: ["US"],
    taxStatus: ["Declined"],
}

const tagsAfterUpdateNoOverride = {
    originalValue: ["123", "111"],
    country: ["IL", "US"],
    taxStatus: ["Approved", "Declined"],
}

const providerUpdated = {
    itemId,
    companyId,
    entityId,
    itemStatus: constants.companyProvider.status.invited,
    itemData: {
        name: newName,
        legalDocuments: [
            {
                name: "Independent Consulting Agreement",
                legalEntityName: "Sportority Inc",
                status: null,
            },
            {
                name: "NDA",
                legalEntityName: "Sportority Inc",
                status: null,
            }
        ]
    },
    tags,
};

const providerEvent = {
    body: JSON.stringify(providerUpdated),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }

}

const bulkBody = {
    companyId,
    tags,
    ids: providerIds,
}

const bulkUpdateEvent = {
    body: JSON.stringify(bulkBody),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const bulkUpdateEventNotAllowed = {
    body: JSON.stringify({
        ids: providerIds,
        companyId: companyId + '_COMPANY'
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const bulkUpdateEventWithFlagsOverride = {
    body: JSON.stringify({
        ...bulkBody,
        isOverrideTags: true,
        tags: tagsAfterUpdateOverride,
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const bulkUpdateEventWithFlagsNoOverride = {
    body: JSON.stringify({
        ...bulkBody,
        isOverrideTags: true,
        tags: tagsAfterUpdateNoOverride,
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const providerNoAllowEvent = {
    body: JSON.stringify({
        itemData: {
            name: newName,
        },
        companyId: companyId + '_COMPANY'
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    },
    pathParameters: {
        id: itemId
    }
}

const providerMissingCompanyIdEvent = {
    body: JSON.stringify({
        itemData: {
            name: newName
        }
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    }, pathParameters: {
        id: itemId
    }

}

const providerSoftUpdateEvent = {
    body: JSON.stringify({
        itemData: {
            uploadedFiles: { file1: 'file1', file2: 'file2' }
        },
        companyId: companyId,
    }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId2
        }
    }, pathParameters: {
        id: itemId
    }
}


const buildEvent = (companyId, itemId, userId, body) => ({
    body: JSON.stringify({...body, ...{ companyId } }),
    requestContext: {
        identity: {
            cognitoIdentityId: userId
        }
    }, pathParameters: {
        id: itemId
    }
})

const providerDataAfterSoftUpdate = {
        uploadedFiles: { file1: 'file1', file2: 'file2' },
        name: newName,
}

const user = {
    userId,
    entityId: userId,
    companyId,
    itemStatus: constants.user.status.active,
    itemData : { userRole: constants.user.role.admin, permissionsComponents: { [permisionConstants.permissionsComponentsKeys.talents]: { isEditor: true } } }
};

describe('updateCompanyProvider', () => {

    beforeAll(async () => {
        let response = await companyProvidersService.create(provider);
        expect(response.itemId).toBe(itemId);
        response = await companyProvidersService.create(childProvider);
        expect(response.itemId).toBe(childItemId);
        response = await companyProvidersService.create(provider2);
        expect(response.itemId).toBe(providerIds[1]);
        response = await companyProvidersService.create(provider3);
        expect(response.itemId).toBe(providerIds[2]);
        response = await companyProvidersService.create(provider4);
        expect(response.itemId).toBe(providerIds[3]);
    });

    afterAll(async () => {
        let result = await companyProvidersService.delete(companyId, itemId);
        expect(result).toBe(true);
        result = await companyProvidersService.delete(companyId, childItemId);
        expect(result).toBe(true);     
        result = await companyProvidersService.delete(companyId, providerIds[1]);
        expect(result).toBe(true);   
        result = await companyProvidersService.delete(companyId, providerIds[2]);
        expect(result).toBe(true);
        await usersService.delete(userId, userId);
    });

    it('update company provider, expect 200, and test data', async () => {
        let result = await usersService.create(user);
        expect(result).toEqual(user);
        let response = await wrapperUpdateCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(200);
        let body = JSON.parse(response.body);
        expect(body.Attributes).toMatchObject({
            itemData: {
                name: newName,
                legalDocuments: [
                    {
                        name: "Independent Consulting Agreement",
                        legalEntityName: "Sportority Inc",
                        status: "sent",
                        signature_request_id: "d2f00cb5-46d2-4160-9c4b-b26dde1e7263"
                    },
                    {
                        name: "NDA",
                        legalEntityName: "Sportority Inc",
                    }
                ]                
            },
            entityId,
            tags: tagsAfterUpdate,
        });
        response = await companyProvidersService.get(companyId, itemId);
        expect(response).toMatchObject({
            itemData: { name: newName },
            entityId,
            tags: tagsAfterUpdate,
        });
        result = await usersService.delete(userId, userId);
        expect(result).toBeTruthy();
        await usersService.update({ userId: user.userId, entityId: user.entityId, modifiedBy: user.userId, itemData: {
            userRole: constants.user.role.admin,
            isEditor: false
        }})
        response = await wrapperUpdateCompanyProviders.run(providerEvent)
        expect(response.statusCode).toBe(403);
    });

    it('SoftUpdate, expects 200', async () => {
        const user2 = {
            userId: userId2,
            entityId: userId2,
            companyId,
            itemStatus: constants.user.status.active,
            itemData: { userRole: constants.user.role.admin, isEditor: true }
        };
        let result = await usersService.create(user2);
        expect(result).toBeTruthy();
        let response = await wrapperUpdateCompanyProviders.run(providerSoftUpdateEvent);
        expect(response.statusCode).toBe(200);
        let body = JSON.parse(response.body);
        expect(body.Attributes.itemData).toMatchObject(providerDataAfterSoftUpdate);
        
    });

    it('User not allow , expect 403', async () => {
        const response = await wrapperUpdateCompanyProviders.run(providerNoAllowEvent)
        expect(response.statusCode).toBe(403);
    });

    it('missing company id, expect 500', async () => {
        const response = await wrapperUpdateCompanyProviders.run(providerMissingCompanyIdEvent)
        expect(response.statusCode).toBe(500);
    });

    it('update legal docs - add new document', async () => {
        await usersService.create(user);
        await companyProvidersService.create(updateNewDocument.companyProviderBeforeUpdate);
        const response = await wrapperUpdateCompanyProviders.run(updateNewDocument.event);
        expect(response.statusCode).toBe(200);
        const userAfterUpdate = await companyProvidersService.get(companyId, updateNewDocument.companyProviderBeforeUpdate.itemId);
        expect(userAfterUpdate.itemData).toMatchObject({
            legalDocuments: [
                {
                  name: 'IP Agreement for Socrates',
                  legalEntityName: 'WITHSOCRAT Org',
                  expirationDate: null
                },
                {
                  name: 'W-8BEN',
                  legalEntityName: 'Tax',
                  signature_request_id: '5b869081-bbe9-4fa8-a749-e38939e6cd3d',
                  status: 'signed'
                }
            ]
        })
    });

    it('reactivate - company provider', async () => {
        let response = await wrapperUpdateCompanyProviders.run(buildEvent(companyId, childItemId, userId, {itemStatus: constants.itemStatus.inactive, itemData: {isProviderSelfEmployedTalent: true}}))
        expect(response.itemStatus).toBe(constants.companyProvider.status.archived);
        expect(response.statusCode).toBe(200);

        response = await wrapperUpdateCompanyProviders.run(buildEvent(companyId, childItemId, userId, {itemStatus: constants.companyProvider.status.registered}))
        expect(response.statusCode).toBe(200);

        const parentProviderAfterUpdate = await companyProvidersService.get(companyId, itemId);
        const childProviderAfterUpdate = await companyProvidersService.get(companyId, childItemId);
        expect(parentProviderAfterUpdate.itemStatus).toBe(constants.companyProvider.status.registered);
        expect(parentProviderAfterUpdate.itemStatus).toBe(childProviderAfterUpdate.itemStatus);
    });    

    it('update company provider tags - bulk, expect 200, and test data', async () => {
        let result = await usersService.create(user);
        expect(result).toEqual(user);
        let response = await wrapperUpdateCompanyProviders.run(bulkUpdateEvent)
        expect(response.statusCode).toBe(200);
        let body = JSON.parse(response.body);
        expect(body[0].Attributes.tags).toMatchObject(tagsAfterUpdate);
        expect(body[1].Attributes.tags).toMatchObject(tagsAfterUpdate);
        expect(body[2].Attributes.tags).toMatchObject(tagsAfterUpdate);

    });

    it('update company provider tags - bulk, expect 200, and test data', async () => {
        let result = await usersService.create(user);
        expect(result).toEqual(user);
        let response = await wrapperUpdateCompanyProviders.run(bulkUpdateEventNotAllowed)
        expect(response.statusCode).toBe(403);

    });

    it('update company provider tags - bulk, override expect 200, and test data', async () => {
        let result = await usersService.create(user);
        expect(result).toEqual(user);
        let response = await wrapperUpdateCompanyProviders.run(bulkUpdateEvent)
        expect(response.statusCode).toBe(200);
        let body = JSON.parse(response.body);
        expect(body[0].Attributes.tags).toMatchObject(tagsAfterUpdate);
        expect(body[1].Attributes.tags).toMatchObject(tagsAfterUpdate);
        expect(body[2].Attributes.tags).toMatchObject(tagsAfterUpdate);

        response = await wrapperUpdateCompanyProviders.run(bulkUpdateEventWithFlagsOverride)
        expect(response.statusCode).toBe(200);
         body = JSON.parse(response.body);
        expect(body[0].Attributes.tags).toMatchObject(tagsAfterUpdateOverride);
        expect(body[1].Attributes.tags).toMatchObject(tagsAfterUpdateOverride);
        expect(body[2].Attributes.tags).toMatchObject(tagsAfterUpdateOverride);

        response = await wrapperUpdateCompanyProviders.run(bulkUpdateEventWithFlagsNoOverride)
        expect(response.statusCode).toBe(200);
         body = JSON.parse(response.body);
        expect(body[0].Attributes.tags).toMatchObject(tagsAfterUpdateNoOverride);
        expect(body[1].Attributes.tags).toMatchObject(tagsAfterUpdateNoOverride);
        expect(body[2].Attributes.tags).toMatchObject(tagsAfterUpdateNoOverride);

    });

});
