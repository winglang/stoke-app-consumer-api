'use strict';

// tests for updateUserNotificationStatus
// Generated by serverless-jest-plugin
const mod = require('../src/userNotifications');
const { UserNotificationsService, CompaniesService, UsersService, constants, permisionConstants } = require('stoke-app-common-api');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'updateNotificationsStatus' });
const userNotificationsService = new UserNotificationsService(process.env.userNotificationsTableName);
const usersService = new UsersService(process.env.consumerAuthTableName);

const userId = 'JETS-NOTIFICATIONSUPDATEALL-USER_1';
const userId2 = 'JETS-NOTIFICATIONSUPDATEALL-USER_2';
const companyId = 'JETS-NOTIFICATIONSUPDATEALL-COMP';
const entityId = 'JETS-NOTIFICATIONSUPDATEALL-COMP';

const user = { entityId, userId, companyId, itemStatus: constants.user.status.active, itemData: { userRole: constants.user.role.admin } };
const userWithNoNotifications = {
  entityId,
  'userId': userId2,
  companyId,
  itemStatus: constants.user.status.active,
  itemData: {
    userRole: constants.user.role.admin,
    permissionsComponents: {
      [permisionConstants.permissionsComponentsKeys.jobs]: {},
    }
  }
};

const unreadUserNotification = {
  itemId: 'JETS-NOTIFICATIONSUPDATEALL-USERNOTIFICATION_1',
  userId: userId,
  itemStatus: constants.userNotification.status.unread,
  itemData: {
    message: { text: "text" },
    action: { key: 1 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email" }
  }
};
const readUserNotification = {
  itemId: 'JETS-NOTIFICATIONSUPDATEALL-READ-USERNOTIFICATION',
  userId: userId,
  itemStatus: constants.userNotification.status.read,
  itemData: {
    message: { text: "text" },
    action: { key: 1 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email" }
  }
};
const archivedUserNotification = {
  itemId: 'JETS-NOTIFICATIONSUPDATEALL-ARCHIVED-USERNOTIFICATION',
  userId: userId,
  itemStatus: constants.userNotification.status.archived,
  itemData: {
    message: { text: "text" },
    action: { key: 1 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email" }
  }
};
const openedUserNotification = {
  itemId: 'JETS-NOTIFICATIONSUPDATEALL-OPEN-USERNOTIFICATION',
  userId: userId,
  itemStatus: constants.userNotification.status.opened,
  itemData: {
    message: { text: "text" },
    action: { key: 1 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email" }
  }
};
const otherUserUserNotification = {
  itemId: 'JETS-NOTIFICATIONSUPDATEALL-USERNOTIFICATION_OTHER',
  userId: 'JETS-NOTIFICATIONSUPDATEALL-USER_OTHER',
  itemStatus: constants.userNotification.status.unread,
  itemData: {
    message: { text: "text" },
    action: { key: 5 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email-user-5" }
  }
};

const clearAllNotificationsEvent = {
  requestContext: {
    identity: {
      cognitoIdentityId: userId
    },
  },
  body: JSON.stringify({ 'companyId': companyId }),
  pathParameters: {
    status: constants.userNotification.status.archived
  },
};
const userWithNoNotificationsEvent = {
  requestContext: {
    identity: {
      cognitoIdentityId: userId2
    },
  },
  body: JSON.stringify({ 'companyId': companyId }),
  pathParameters: {
    status: constants.userNotification.status.archived
  },
};

const notSupportedStatusNotificationsEvent = {
  requestContext: {
    identity: {
      cognitoIdentityId: userId
    },
  },
  body: JSON.stringify({ 'companyId': companyId }),
  pathParameters: {
    status: 'notSupportedStatus'
  },
};

const unauthorizedEvent = {
  requestContext: {
    identity: {
      cognitoIdentityId: 'userId'
    },
  },
  body: JSON.stringify({ 'companyId': companyId }),
  pathParameters: {
    status: constants.userNotification.status.archived
  },
};

const unauthorizedEvent2 = {
  requestContext: {
    identity: {
      cognitoIdentityId: userId
    },
  },
  body: JSON.stringify({ 'companyId': 'notExistingCompanyId' }),
  pathParameters: {
    status: constants.userNotification.status.archived
  },
};

describe('updateUserNotificationStatus', () => {
  beforeAll(async () => {
    let result = await usersService.create(user);
    expect(result.userId).toBe(userId);
    result = await usersService.create(userWithNoNotifications);
    expect(result.userId).toBe(userId2);
    result = await userNotificationsService.create(unreadUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.unread);
    result = await userNotificationsService.create(otherUserUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.unread);
    result = await userNotificationsService.create(readUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.read);
    result = await userNotificationsService.create(archivedUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.archived);
    result = await userNotificationsService.create(openedUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.opened);

  });

  it('updateNotificationsStatus, expect 200', async () => {
    const response = await wrapped.run(clearAllNotificationsEvent);
    expect(response.statusCode).toBe(200);

    let result = await userNotificationsService.get(userId, unreadUserNotification.itemId);
    expect(result.itemStatus).toBe(constants.userNotification.status.archived);
    result = await userNotificationsService.get(otherUserUserNotification.userId, otherUserUserNotification.itemId);
    expect(result.itemStatus).toBe(otherUserUserNotification.itemStatus);

  });

  it('userWithNoNotificationsEvent, expect 200', async () => {
    const response = await wrapped.run(userWithNoNotificationsEvent);
    expect(response.statusCode).toBe(200);
  });

  it('notSupportedStatusNotificationsEvent, expect 500', async () => {
    const response = await wrapped.run(notSupportedStatusNotificationsEvent);
    expect(response.statusCode).toBe(500);
  });

  it('unauthorized, expect 403', async () => {
    const response = await wrapped.run(unauthorizedEvent);
    expect(response.statusCode).toBe(403);
  });

  it('unauthorized, expect 403', async () => {
    const response = await wrapped.run(unauthorizedEvent2);
    expect(response.statusCode).toBe(403);
  });


  afterAll(async () => {
    let result = await usersService.delete(userId, entityId);
    result = await usersService.delete(userId2, entityId);
    result = await userNotificationsService.delete({ userId: unreadUserNotification.userId, itemId: unreadUserNotification.itemId });
    result = await userNotificationsService.delete({ userId: otherUserUserNotification.userId, itemId: otherUserUserNotification.itemId });
    result = await userNotificationsService.delete({ userId: otherUserUserNotification.userId, itemId: readUserNotification.itemId });
    result = await userNotificationsService.delete({ userId: otherUserUserNotification.userId, itemId: archivedUserNotification.itemId });
    result = await userNotificationsService.delete({ userId: otherUserUserNotification.userId, itemId: openedUserNotification.itemId });
  });
});
