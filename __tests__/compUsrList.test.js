"use strict";

// tests for users.js functions
// Generated by serverless-jest-plugin

const mod = require("../src/companies");
const jestPlugin = require("serverless-jest-plugin");
const {
  CompaniesService,
  UsersService,
  constants,
  permisionConstants
} = require("stoke-app-common-api");
const companiesService = new CompaniesService(
  process.env.customersTableName,
  constants.projectionExpression.defaultAttributes,
  constants.attributeNames.defaultAttributes
);
const usersService = new UsersService(
  process.env.consumerAuthTableName,
  constants.projectionExpression.defaultAttributes,
  constants.attributeNames.defaultAttributes
);
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrappergetUsers = lambdaWrapper.wrap(mod, {
  handler: "getCompanyUsers"
});

const userId = "JEST-TEST-COMP-USERS_COMPANY";
const userIdAdmin = "JEST-TEST-COMP-USERS_COMPANY-ADMIN";
const userIdAdmin2 = "JEST-TEST-COMP-USERS_COMPANY-ADMIN2";
const companyId = "JEST-TEST-COMP-USERS_COMPANY-COMPANY";
const entityId = "JEST-TEST-COMP-USERS_COMPANY-ENTITY";
const userName = constants.prefix.userPoolId + "COMP-USERS_COMPANY-joe@stokeco.com";
const userName2 = constants.prefix.userPoolId + "COMP-USERS_COMPANY-joe@stokeco2.com";
const userNameSigned = constants.prefix.userPoolId + "COMP-USERS_COMPANY-jeck@stokeco.com";
const newUserName = "COMP-USERS_COMPANY-new@stokeco.com";
const newUserEmail = "COMP-USERS_COMPANY-new@stokeco.com";

const userAdmin = {
  userId: userIdAdmin,
  entityId: companyId,
  companyId: companyId,
  createdBy: userIdAdmin,
  modifiedBy: userIdAdmin,
  itemStatus: constants.user.status.active,
  itemData: {
    userRole: constants.user.role.admin,
    permissionsComponents: {
      [permisionConstants.permissionsComponentsKeys.users]: {},
    }
  }
};

const userAdmin2 = {
  userId: userIdAdmin2,
  entityId: companyId,
  companyId: companyId,
  createdBy: userIdAdmin,
  modifiedBy: userIdAdmin,
  itemStatus: constants.user.status.active,
  itemData: {
    userRole: constants.user.role.admin
  }
};

const userInEntity = {
  userId: userId,
  entityId,
  companyId: companyId,
  createdBy: userIdAdmin,
  modifiedBy: userIdAdmin,
  itemStatus: constants.user.status.active,
  itemData: {
    userRole: constants.user.role.admin
  }
};

const userInCompany = {
  companyId,
  itemId: userName,
  userId: undefined,
  itemData: {
    givenName: "admin",
    familyName: "admin"
  }
};

const userSigndInCompany2 = {
  companyId,
  itemId: userName2,
  userId: userIdAdmin2,
  itemData: {
    hidden: true,
    givenName: "hidden",
    familyName: "hidden"
  }
};


const userSigndInCompany = {
  companyId,
  itemId: userNameSigned,
  userId: userIdAdmin,
  itemData: {
    givenName: "admin",
    familyName: "admin"
  }
};

const getUsersOfCompanyEvent = {
  requestContext: {
    identity: {
      cognitoIdentityId: userIdAdmin
    }
  },
  pathParameters: {
    id: companyId
  },
  queryStringParameters: {}
};

const newUserToCompanyEventNotAuth = {
  queryStringParameters: {},
  pathParameters: {
    id: companyId
  },
  requestContext: {
    identity: {
      cognitoIdentityId: "userId_not_auth"
    }
  }
};

const newUserToCompanyEventMissingCompanyId = {
  requestContext: {
    identity: {
      cognitoIdentityId: userId
    }
  },
  pathParameters: {}
};

describe("getUsersOfCompany", () => {
  beforeAll(async () => {
    let response = await companiesService.create(userInCompany);
    expect(response.userId).toBe(undefined);
    response = await companiesService.create(userSigndInCompany);
    expect(response.userId).toBe(userIdAdmin);
    response = await companiesService.create(userSigndInCompany2);
    expect(response.userId).toBe(userIdAdmin2);
    response = await usersService.create(userAdmin);
    expect(response.userId).toBe(userIdAdmin);
    response = await usersService.create(userAdmin2);
    expect(response.userId).toBe(userIdAdmin2);
    response = await usersService.create(userInEntity);
    expect(response.userId).toBe(userId);
  });

  it("get users, expect 200, and test data", async () => {
    let response = await wrappergetUsers.run(getUsersOfCompanyEvent);
    expect(response.statusCode).toBe(200);
    let body = JSON.parse(response.body);
    expect(body.length).toBe(1);
    getUsersOfCompanyEvent.queryStringParameters.all = '"true"';
    getUsersOfCompanyEvent.queryStringParameters.withEntities = '"true"';
    response = await wrappergetUsers.run(getUsersOfCompanyEvent);
    expect(response.statusCode).toBe(200);
    body = JSON.parse(response.body);
    expect(body.length).toBe(2);
    expect(body).toMatchObject([
      {
        itemData: {
          givenName: "admin",
          familyName: "admin",
        },
        companyId,
        itemId: userName
      },
      {
        itemData: {
          departmentIds: [companyId],
          givenName: "admin",
          familyName: "admin",
          userPermissions: {
            [companyId]: {
              isEditor: true,
            },
          },
        },
        companyId,
        itemId: userNameSigned,
        userId: userIdAdmin
      }
    ]);
  });

  it("User not admin add user to company, expect 403", async () => {
    let response = await wrappergetUsers.run(newUserToCompanyEventNotAuth);
    expect(response.statusCode).toBe(403);
  });

  it("missing entity id add user to company, expect 500", async () => {
    let response = await wrappergetUsers.run(
      newUserToCompanyEventMissingCompanyId
    );
    expect(response.statusCode).toBe(500);
  });

  afterAll(async () => {
    //cleanup
    let result = await companiesService.delete(userName);
    expect(result).toBe(true);
    result = await companiesService.delete(userNameSigned);
    expect(result).toBe(true);
    result = await companiesService.delete(userName2);
    expect(result).toBe(true);
    result = await companiesService.delete(newUserName);
    expect(result).toBe(true);
    result = await usersService.delete(userIdAdmin, companyId);
    expect(result).toBe(true);
    result = await usersService.delete(userIdAdmin2, companyId);
    expect(result).toBe(true);
    result = await usersService.delete(userIdAdmin, userIdAdmin);
    expect(result).toBe(true);
    result = await usersService.delete(userId, entityId);
    expect(result).toBe(true);
  });
});
