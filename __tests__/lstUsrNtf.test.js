'use strict';

// tests for listUserNotifications
// Generated by serverless-jest-plugin

const userNotifications = require('../src/userNotifications');
const { UserNotificationsService, constants } = require('stoke-app-common-api');
const userNotificationsService = new UserNotificationsService(process.env.userNotificationsTableName);

const jestPlugin = require('serverless-jest-plugin');
const userId = 'JETS-GETUSERNOTIFICATIONS-USER_1';
const userId2 = 'JETS-GETUSERNOTIFICATIONS-USER_2';
const userId3 = 'JETS-GETUSERNOTIFICATIONS-USER_3';

const unreadUserNotification = {
  itemId: 'JETS-GETUSERNOTIFICATIONS-USERNOTIFICATION_1',
  userId: userId,
  itemStatus: constants.userNotification.status.unread,
  itemData: {
    message: { text: "text"},
    action: { key: 1 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email"}
  }
};

const readUserNotification = {
  itemId: 'JETS-GETUSERNOTIFICATIONS-USERNOTIFICATION_2',
  userId: userId,
  itemStatus: constants.userNotification.status.read,
  itemData: {
    message: { text: "text"},
    action: { key: 2 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email"}
  }
};

const openedUserNotification = {
  itemId: 'JETS-GETUSERNOTIFICATIONS-USERNOTIFICATION_3',
  userId: userId,
  itemStatus: constants.userNotification.status.opened,
  itemData: {
    message: { text: "text"},
    action: { key: 3 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email"}
  }
};

const otherUserUserNotification = {
  itemId: 'JETS-GETUSERNOTIFICATIONS-USERNOTIFICATION_3',
  userId: userId2,
  itemStatus: constants.userNotification.status.unread,
  itemData: {
    message: { text: "text"},
    action: { key: 4 },
    notificationSource: constants.notification.source.talent,
    user: { email: "email-user-2"}
  }
};

describe('listUserNotifications', () => {
  beforeAll(async () => {
    let result = await userNotificationsService.create(unreadUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.unread);
    result = await userNotificationsService.create(readUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.read);
    result = await userNotificationsService.create(openedUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.opened);
    result = await userNotificationsService.create(otherUserUserNotification);
    expect(result.itemStatus).toBe(constants.userNotification.status.unread);
  });

  it('get userNotifications, expect 200', async () => {
    const response = await userNotifications.listUserNotifications(userId);
    expect(response.new.length).toBe(1);
    expect(response.earlier.length).toBe(2);
    expect(response.new[0].notificationId).toBe(unreadUserNotification.itemId);
    expect(response.new[0].message.text).toBe("text");
    const resReadUserNotification = {
      user: readUserNotification.itemData.user,
      message: readUserNotification.itemData.message,
      action: readUserNotification.itemData.action,
      status: constants.userNotification.status.read,
      notificationId: readUserNotification.itemId
    };
    expect(response.earlier).toContainEqual(resReadUserNotification);
    const resOpenedUserNotification = {
      user: openedUserNotification.itemData.user,
      message: openedUserNotification.itemData.message,
      action: openedUserNotification.itemData.action,
      status: constants.userNotification.status.opened,
      notificationId: openedUserNotification.itemId
    };
    expect(response.earlier).toContainEqual(resOpenedUserNotification);
  });

  it('get userNotifications with wrong id, expect failure', async () => {
    const response = await userNotifications.listUserNotifications(userId3);
    expect(response.new.length).toBe(0);
    expect(response.earlier.length).toBe(0);
  });

  afterAll(async () => {
    let result = await userNotificationsService.delete(
        {userId: unreadUserNotification.userId, itemId: unreadUserNotification.itemId });
    result = await userNotificationsService.delete(
        {userId: unreadUserNotification.userId, itemId: readUserNotification.itemId });
    result = await userNotificationsService.delete(
        {userId: unreadUserNotification.userId, itemId: openedUserNotification.itemId });
    result = await userNotificationsService.delete(
        {userId: otherUserUserNotification.userId, itemId: otherUserUserNotification.itemId });
  });
});
