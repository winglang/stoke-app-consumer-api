'use strict';

// tests for updateUserNotification
// Generated by serverless-jest-plugin
const mod = require('../src/userNotifications');
const { UserNotificationsService, UsersService, constants, permisionConstants } = require('stoke-app-common-api');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'updateUserNotification' });
const userNotificationsService = new UserNotificationsService(process.env.userNotificationsTableName);
const usersService = new UsersService(
    process.env.consumerAuthTableName,
    constants.projectionExpression.defaultAttributes,
    constants.attributeNames.defaultAttributes,
);

const userId = 'JETS-UPDUSERNOTIFICATIONS-USER_1';
const companyId = 'JETS-UPDUSERNOTIFICATIONS-COMPANY_1';

const user = {
    userId: userId,
    entityId: companyId,
    companyId,
    createdBy: 'admin',
    modifiedBy: 'admin',
    itemStatus: constants.user.status.active,
    itemData: {
        userRole: constants.user.role.admin,
        permissionsComponents: {
            [permisionConstants.permissionsComponentsKeys.jobs]: { },
        }
    },
};

const unreadUserNotification = {
    itemId: 'JETS-UPDUSERNOTIFICATIONS-USERNOTIFICATION_1',
    userId: userId,
    itemStatus: constants.userNotification.status.unread,
    itemData: {
        message: { text: 'text' },
        action: { key: 1 },
        notificationSource: constants.notification.source.talent,
        user: { email: 'email' },
        [mod.itemDataAllowedToEditAttributes.isHidden]: false
    },
};

const unreadUserNotification2 = {
    itemId: 'JETS-UPDUSERNOTIFICATIONS-USERNOTIFICATION_2',
    userId: userId,
    itemStatus: constants.userNotification.status.unread,
    itemData: {
        message: { text: 'text' },
        action: { key: 1 },
        notificationSource: constants.notification.source.talent,
        user: { email: 'email' },
        [mod.itemDataAllowedToEditAttributes.isHidden]: false
    },
};

const unreadUserNotification3 = {
    itemId: 'JETS-UPDUSERNOTIFICATIONS-USERNOTIFICATION_3',
    userId: userId,
    itemStatus: constants.userNotification.status.unread,
    itemData: {
        message: { text: 'text' },
        action: { key: 1 },
        notificationSource: constants.notification.source.talent,
        user: { email: 'email' },
        [mod.itemDataAllowedToEditAttributes.isHidden]: false
    },
};

const otherUserUserNotification = {
    itemId: 'JETS-UPDUSERNOTIFICATIONS-USERNOTIFICATION_5',
    userId: 'JETS-UPDUSERNOTIFICATIONS-USER_5',
    itemStatus: constants.userNotification.status.unread,
    itemData: {
        message: { text: 'text' },
        action: { key: 5 },
        notificationSource: constants.notification.source.talent,
        user: { email: 'email-user-5' },
    },
};

const event = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        companyId,
        itemStatus: constants.userNotification.status.read,
        itemIds: [unreadUserNotification.itemId],
    }),
};

const eventMultipleIds = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        companyId,
        itemStatus: constants.userNotification.status.read,
        itemIds: [unreadUserNotification2.itemId, unreadUserNotification3.itemId],
    }),
};

const badNotificationIdEvent1 = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        companyId,
        itemStatus: constants.userNotification.status.read,
        itemIds: [otherUserUserNotification.itemId],
    }),
};

const badNotificationIdEvent2 = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        itemStatus: constants.userNotification.status.read,
        itemIds: [unreadUserNotification.itemId],
    }),
};

const validFieldsUpdateEvent = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        companyId,
        data: { [mod.itemDataAllowedToEditAttributes.lastSnooze]: new Date('11.11.11').getTime() },
        itemIds: [unreadUserNotification.itemId],
    }),
};

const validFieldsUpdateMultipleEvent = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        companyId,
        data: { [mod.itemDataAllowedToEditAttributes.lastSnooze]: new Date('11.11.11').getTime() },
        itemIds: [unreadUserNotification2.itemId, unreadUserNotification3.itemId],
    }),
};

const invalidFieldsUpdateEvent = {
    requestContext: {
        identity: {
            cognitoIdentityId: userId,
        },
    },
    body: JSON.stringify({
        companyId,
        data: { isVisible: true },
        itemIds: [unreadUserNotification.itemId],
    }),
};

describe('updateUserNotification', () => {
    beforeAll(async () => {
        let result = await usersService.create(user);
        expect(result).toMatchObject(user);
        result = await userNotificationsService.create(unreadUserNotification);
        result = await userNotificationsService.create(unreadUserNotification2);
        result = await userNotificationsService.create(unreadUserNotification3);
        expect(result.itemStatus).toBe(constants.userNotification.status.unread);
        result = await userNotificationsService.create(otherUserUserNotification);
        expect(result.itemStatus).toBe(constants.userNotification.status.unread);
    });

    it('updateUserNotification, update status expect 200', async () => {
        const response = await wrapped.run(event);
        expect(response.statusCode).toBe(200);
        expect(JSON.parse(response.body)[0].Attributes.itemStatus).toBe(constants.userNotification.status.read);
        const un = await userNotificationsService.get(userId, unreadUserNotification.itemId);
        expect(un.itemId).toBe(unreadUserNotification.itemId);
        expect(un.itemStatus).toBe(constants.userNotification.status.read);
    });
    
    it('updateUserNotification, update status for multiple notifications expect 200', async () => {
        const response = await wrapped.run(eventMultipleIds);
        expect(response.statusCode).toBe(200);
        expect(JSON.parse(response.body)[0].Attributes.itemStatus).toBe(constants.userNotification.status.read);
        const un = await userNotificationsService.get(userId, unreadUserNotification2.itemId);
        expect(un.itemId).toBe(unreadUserNotification2.itemId);
        expect(un.itemStatus).toBe(constants.userNotification.status.read);
        const un2 = await userNotificationsService.get(userId, unreadUserNotification3.itemId);
        expect(un2.itemId).toBe(unreadUserNotification3.itemId);
        expect(un2.itemStatus).toBe(constants.userNotification.status.read);
    });

    it('updateUserNotification, update valid fields expect 200', async () => {
        const response = await wrapped.run(validFieldsUpdateEvent);
        expect(response.statusCode).toBe(200);
        expect(JSON.parse(response.body)[0].Attributes.itemData[mod.itemDataAllowedToEditAttributes.lastSnooze]).toBe(
            JSON.parse(validFieldsUpdateEvent.body).data[mod.itemDataAllowedToEditAttributes.lastSnooze],
        );
    });
    
    it('updateUserNotification, update multiple valid fields expect 200', async () => {
        const response = await wrapped.run(validFieldsUpdateMultipleEvent);
        expect(response.statusCode).toBe(200);
        expect(JSON.parse(response.body)[0].Attributes.itemData[mod.itemDataAllowedToEditAttributes.lastSnooze]).toBe(
            JSON.parse(validFieldsUpdateMultipleEvent.body).data[mod.itemDataAllowedToEditAttributes.lastSnooze],
        );
        expect(JSON.parse(response.body)[1].Attributes.itemData[mod.itemDataAllowedToEditAttributes.lastSnooze]).toBe(
            JSON.parse(validFieldsUpdateMultipleEvent.body).data[mod.itemDataAllowedToEditAttributes.lastSnooze],
        );
    });

    it('updateUserNotification, update invalid fields expect failure', async () => {
        const response = await wrapped.run(invalidFieldsUpdateEvent);
        expect(response.statusCode).toBe(500);
        expect(JSON.parse(response.body).status).toBe(false);
    });

    it('updateUserNotification with wrong id, expect failure', async () => {
        let response = await wrapped.run(badNotificationIdEvent1);
        expect(response.statusCode).toBe(500);
        expect(JSON.parse(response.body).status).toBe(false);
        response = await wrapped.run(badNotificationIdEvent2);
        expect(response.statusCode).toBe(500);
        expect(JSON.parse(response.body).status).toBe(false);
    });

    afterAll(async () => {
        let result = await userNotificationsService.delete({
            userId: unreadUserNotification.userId,
            itemId: unreadUserNotification.itemId,
        });
        result = await userNotificationsService.delete({
            userId: unreadUserNotification2.userId,
            itemId: unreadUserNotification2.itemId,
        });
        result = await userNotificationsService.delete({
            userId: unreadUserNotification3.userId,
            itemId: unreadUserNotification3.itemId,
        });
        result = await userNotificationsService.delete({
            userId: otherUserUserNotification.userId,
            itemId: otherUserUserNotification.itemId,
        });
        result = await usersService.delete(user.userId, user.companyId);
    });
});
