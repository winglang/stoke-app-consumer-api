/* eslint-disable max-lines-per-function */
/* eslint-disable no-undef */
'use strict';

// tests for users.js functions
// Generated by serverless-jest-plugin

const mod = require('../src/users');
const jestPlugin = require('serverless-jest-plugin');
const { SettingsService, UsersService, CompaniesService, constants } = require('stoke-app-common-api');
const settingsService = new SettingsService(process.env.settingsTableName);
const usersService = new UsersService(process.env.consumerAuthTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const companiesService = new CompaniesService(process.env.customersTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes);
const lambdaWrapper = jestPlugin.lambdaWrapper;
const signupUserToCompanyUtil = require('../src/signupUserToCompanyUtil')
const wrapperGetUser = lambdaWrapper.wrap(mod, { handler: 'getUserData' });
const companyId = 'JEST-TEST-GET-USER-COMPANY';
const companyId2 = 'JEST-TEST-GET-USER-COMPANY-EXTERNAL';
const userId = "JEST-TEST-GET-USER"
const userId2 = "JEST-TEST-GET-USER-EXTERNAL"
const entityId = "JEST-TEST-GET-USER"
const companyName = "Stoke"
const entityName = "R&D"
const givenName = "joe"
const familyName = "Shmoe"
const user2Sub = '1234-1234-1234-1234'
const externalItemId = constants.prefix.userPoolId + constants.prefix.external + user2Sub
const externalAuthProvider = `hash1:CognitoSignIn:${user2Sub}`
const userItem = {
    userId,
    entityId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.user.status.active,
    itemData: {
        userRole: constants.user.role.admin
    }
};

const externalUserItem = {
    userId: userId2,
    entityId: userId2,
    companyId: companyId2,
    createdBy: userId2,
    modifiedBy: userId2,
    itemData: {
        userRole: constants.user.role.user
    }
};

const userItemInCompany = {
    userId,
    entityId: companyId,
    companyId,
    createdBy: userId,
    modifiedBy: userId,
    itemStatus: constants.user.status.active,
    itemData: {
        userRole: constants.user.role.user
    }
};

const externalUserItemInCompany = {
    entityId: companyId2,
    companyId: companyId2,
    createdBy: userId2,
    modifiedBy: userId2,
    itemData: {
        userRole: constants.user.role.user
    }
};

const userEvent = {
    "requestContext": {
        "identity": {
            "cognitoIdentityId": userId
        }
    }
}

const externalUserEvent = {
    "requestContext": {
        "identity": {
            "cognitoIdentityId": userId2,
            "cognitoAuthenticationProvider": externalAuthProvider
        }
    }
}

const userInCompany = {
    companyId,
    itemId: constants.prefix.userPoolId + userId,
    userId,
    itemData: {
        givenName,
        familyName
    }
};

const externalUserInCompany = {
    companyId: companyId2,
    itemId: externalItemId,
    itemStatus: constants.user.status.invited,
    modifiedBy: userId2,
    itemData: {
        givenName: givenName + '_external',
        familyName: familyName + '_external'
    }
};

const company = {
    companyId,
    itemId: constants.prefix.company + companyId,
    itemData: {
        entityName: companyName
    }
};

const entity = {
    companyId,
    itemId: constants.prefix.entity + entityId,
    itemData: {
        entityName
    }
};

const entitySettings = {
    itemId: constants.prefix.entity + entityId,
    userId: userId,
    entityId,
    companyId,
    itemData: {
        legalEntity: {},
    }
};

describe('getUser', () => {
    beforeAll(async () => {
        let response = await usersService.create(userItem);
        expect(response.userId).toBe(userId);
        response = await usersService.create(userItemInCompany);
        expect(response.userId).toBe(userId);
        response = await companiesService.create(userInCompany);
        expect(response.itemId).toBe(userInCompany.itemId);
        response = await companiesService.create(company);
        expect(response.itemId).toBe(company.itemId);
        response = await companiesService.create(entity);
        expect(response.itemId).toBe(entity.itemId);
        response = await settingsService.create(entitySettings);
        expect(response).toMatchObject(entitySettings);
    });

    it('get users, expect 200, and test data', async () => {
        let response = await wrapperGetUser.run(userEvent)
        expect(response.statusCode).toBe(200);
        const body = JSON.parse(response.body);
        expect(body.entities.length).toBe(2);
        expect(body.entities).toMatchObject([{
            companyId: companyId,
            entityId: entityId,
            userId: userId,
            itemData: {
                userRole: constants.user.role.admin,
                entityName,

            },
            userRole: constants.user.role.admin,
            // approversList: [userId],
        }, {
            companyId: companyId,
            entityId: companyId,
            userId: userId,
            itemData: {
                userRole: constants.user.role.user,
                entityName: companyName,
            }
        }]);
        expect(body.userData.itemData).toMatchObject({ givenName, familyName })
        expect(body.userData.companyName).toBe(companyName);
    });

    afterAll(async () => {
        //cleanup
        let result = await usersService.delete(userId, entityId);
        expect(result).toBe(true);
        result = await usersService.delete(userId, companyId);
        expect(result).toBe(true);
        result = await companiesService.delete(constants.prefix.userPoolId + userId);
        expect(result).toBe(true);
        result = await companiesService.delete(constants.prefix.company + companyId);
        expect(result).toBe(true);
        result = await companiesService.delete(constants.prefix.entity + entityId);
        expect(result).toBe(true);
        result = await settingsService.delete(entitySettings.itemId);
        expect(result).toBe(true);
    });
});

describe('isExternalProvider Invited flow', () => {
    describe('external provider inventation', () => {
        beforeAll(async () => {
            let creationResponse = await usersService.create(externalUserItem);
            creationResponse = await usersService.create(externalUserItemInCompany);
            creationResponse = await companiesService.create(externalUserInCompany);
        })

        it('should add the userId', async () => {
            await wrapperGetUser.run(externalUserEvent)
            const keyConditionExpression = "userId = :userId";
            const expressionAttributeValues = { ":userId": userId2 };
            const newCompany = await companiesService.query(process.env.gsiItemByUserIdIndexName, keyConditionExpression, expressionAttributeValues)
            
            expect(newCompany).toBeDefined()
            expect(newCompany.length).toBe(1)
        })

        describe('add user to company', () => {
            describe('registration success', () => {
                it('should perseist new company settings', async () => {
                    await wrapperGetUser.run(externalUserEvent)
                    const newCompany = await settingsService.get(`${constants.prefix.user}${userId2}`);
                    expect(newCompany).toBeDefined()
                    expect(newCompany.companyId).toBe(companyId2)
                    expect(newCompany.itemStatus).toBe(constants.settings.status.active)
                })
            })
        })

        afterAll(async () => {
            await usersService.delete(userId2, userId2);
            await usersService.delete(userId2, companyId2);
            await companiesService.delete(externalItemId);
            await settingsService.delete(`${constants.prefix.user}${userId2}`)
        })
    })
})
