'use strict';

// tests for cognitoPreSignup
// Generated by serverless-jest-plugin

const auth = require('../src/auth');
const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrappedPostConfirmation = lambdaWrapper.wrap(auth, { handler: 'postConfirmation' });
const postConfirmationEvent = require('../mocks/cognitoPostConfirmation-event.json');
const { constants, jsonLogger, CompaniesService } = require('stoke-app-common-api');
const {
    customersTableName
} = process.env;
const companiesService = new CompaniesService(customersTableName, constants.projectionExpression.defaultAttributes, constants.attributeNames.defaultAttributes)
const eventSub = postConfirmationEvent.request.userAttributes.sub

const jsonLoggerSpy = jest.spyOn(jsonLogger, 'info');

const externalCustomerData = {
    itemId: "userpoolid_external_test.case@devopsstoketalent.onmicrosoft.com",
    companyId: "ANDCO22290437520-cac9-11ec-8991-7dbd52ee1071",
    createdAt: 1656248245114,
    createdBy: "us-east-1:9622a222-5a10-4881-84e6-5ba634cb75ea1",
    itemData: {
        companyId: "ANDCO22290437520-cac9-11ec-8991-7dbd52ee1071",
        familyName: "Jhon",
        givenName: "Due",
        userEmail: "Test.Case@devopsstoketalent.onmicrosoft.com"
    },
    itemStatus: "invited",
    modifiedAt: 1656318682713,
    modifiedBy: "2d346e9f-2c25-48b2-b14a-978b85450049",
}

describe('postConfirmation - cognitoPostConfirmation', () => {
    it('should skip updating for source all triggerSource but PostConfirmation_ConfirmSignUp', async () => {
        const postConfirmationEventPreSignTrigger = Object.assign({}, postConfirmationEvent)
        postConfirmationEventPreSignTrigger.triggerSource = constants.cognitoUserPoolLambdaTriggerSources.preSignUpExternalProvider
        const response = await wrappedPostConfirmation.run(postConfirmationEventPreSignTrigger)
        expect(response).toBeDefined();
        expect(jsonLoggerSpy).toHaveBeenLastCalledWith({
            type: "TRACKING",
            function: "auth::postConfirmation",
            text: `skipping confirmation due to trigger source: ${postConfirmationEventPreSignTrigger.triggerSource}`
        })
    })
});

describe('not skipping update', () => {
    beforeEach(async () => {
        postConfirmationEvent.triggerSource = constants.cognitoUserPoolLambdaTriggerSources.postConfirmationConfirmSignUp
        await companiesService.create(externalCustomerData)
    });

    it('should not skip updating for triggerSource PostConfirmation_ConfirmSignUp and email from external domain', async () => {
        const response = await wrappedPostConfirmation.run(postConfirmationEvent)
        expect(response).toBeDefined();
        expect(response.userName).toEqual(postConfirmationEvent.userName)
    })


    it('should create new item and archive old one with original mail from cognito', async () => {
        let response = await wrappedPostConfirmation.run(postConfirmationEvent)
        expect(response).toBeDefined();

        response = await companiesService.get(externalCustomerData.itemId)
        expect(response.itemStatus).toEqual(constants.itemStatus.archived)

        const newUserId = `${constants.prefix.userPoolId}${constants.prefix.external}${eventSub}`
        response = await companiesService.get(newUserId)
        expect(response).toBeDefined();
        expect(response.itemStatus).toEqual(constants.user.status.invited)
        expect(response.itemData.userEmail).toEqual(externalCustomerData.itemData.userEmail)
    });
    afterEach(async () => {
        await companiesService.delete(externalCustomerData.itemId)
        await companiesService.delete(`${constants.prefix.userPoolId}${constants.prefix.external}${eventSub}`)
    });
})
